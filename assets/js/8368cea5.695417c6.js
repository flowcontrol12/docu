"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[48778],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),m=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=m(e.components);return a.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=m(t),d=r,k=u["".concat(i,".").concat(d)]||u[d]||p[d]||l;return t?a.createElement(k,s(s({ref:n},c),{},{components:t})):a.createElement(k,s({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,s=new Array(l);s[0]=u;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var m=2;m<l;m++)s[m]=t[m];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9693:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>m,toc:()=>p});var a=t(83117),r=t(80102),l=(t(67294),t(3905)),s=["components"],o={},i="NQL query examples",m={unversionedId:"NQL/NQL_examples",id:"NQL/NQL_examples",title:"NQL query examples",description:"Glossary",source:"@site/docs/05-NQL/NQL_examples.md",sourceDirName:"05-NQL",slug:"/NQL/NQL_examples",permalink:"/NQL/NQL_examples",draft:!1,tags:[],version:"current",lastUpdatedAt:1680030664,formattedLastUpdatedAt:"28 Mar 2023",frontMatter:{},sidebar:"docs",previous:{title:"Licenses",permalink:"/User Guide/Configuration/Licenses"},next:{title:"Examples",permalink:"/Examples/"}},c={},p=[{value:"Glossary",id:"glossary",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Scenario",id:"scenario",level:3},{value:"NQL Query",id:"nql-query",level:3},{value:"Description",id:"description",level:3},{value:"Example 2",id:"example-2",level:3},{value:"Scenario",id:"scenario-1",level:3},{value:"NQL Query method 1",id:"nql-query-method-1",level:3},{value:"Description",id:"description-1",level:3},{value:"NQL Query method 2",id:"nql-query-method-2",level:3},{value:"Description",id:"description-2",level:3},{value:"Example 3",id:"example-3",level:2},{value:"Scenario",id:"scenario-2",level:3},{value:"NQL Query",id:"nql-query-1",level:3},{value:"Description",id:"description-3",level:3},{value:"Example 4",id:"example-4",level:2},{value:"Scenario",id:"scenario-3",level:3},{value:"NQL Query",id:"nql-query-2",level:3},{value:"Description",id:"description-4",level:3},{value:"Example 5 (real data from the network)",id:"example-5-real-data-from-the-network",level:2},{value:"Description",id:"description-5",level:3},{value:"Example 6 (real data from the network)",id:"example-6-real-data-from-the-network",level:2},{value:"Scenario",id:"scenario-4",level:3},{value:"NQL Query",id:"nql-query-3",level:3},{value:"Description",id:"description-6",level:3},{value:"Example 7 (real data from the network)",id:"example-7-real-data-from-the-network",level:2},{value:"Scenario",id:"scenario-5",level:3},{value:"NQL Query",id:"nql-query-4",level:3},{value:"Description",id:"description-7",level:3},{value:"Example 8 (real data from the network)",id:"example-8-real-data-from-the-network",level:2},{value:"Scenario",id:"scenario-6",level:3},{value:"NQL Query",id:"nql-query-5",level:3},{value:"Description",id:"description-8",level:3},{value:"Example 9 (real data from the network)",id:"example-9-real-data-from-the-network",level:2},{value:"Scenario",id:"scenario-7",level:3},{value:"NQL Query",id:"nql-query-6",level:3},{value:"Description",id:"description-9",level:3}],u={toc:p};function d(e){var n=e.components,t=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"nql-query-examples"},"NQL query examples"),(0,l.kt)("h2",{id:"glossary"},"Glossary"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"field"),(0,l.kt)("td",{parentName:"tr",align:null},"Key-value pair, a way of storing information, e.g. name=John. In special cases, it is allowed to store an empty value in the field. It is not possible to create a field with an empty/undefined key. The value of the field for a specific data type.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"A collection of fields that form the basic unit of data storage. It has mandatory/system fields. A blank document has only mandatory/system fields.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"collection"),(0,l.kt)("td",{parentName:"tr",align:null},"A logical container for storing objects. The collection can be empty, or it can be distributed.  Provides an interface for querying, adding/deleting/modifying documents regardless of their internal organization.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"input collection"),(0,l.kt)("td",{parentName:"tr",align:null},"A collection of objects (input objects) that is passed to the command.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"output collection"),(0,l.kt)("td",{parentName:"tr",align:null},"A collection of objects (output objects) that is the result of executing a command.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"stream"),(0,l.kt)("td",{parentName:"tr",align:null},"Data source. Generates (on demand or continuously) a sequence of objects (collection) of a specific type (origin).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"command"),(0,l.kt)("td",{parentName:"tr",align:null},"Processes a set of data (collections) coming from the input and passes the output result. Commands can be more than one and can form a so-called pipe: source1 ","|"," command1 ","|"," command2 ","|"," .... commandN. Each command has an input and an output of data (collections). The input of a command is a sequence of input objects (collection) which are the result (output) of the previous command or stream. The result of a command is a collection of output objects. A special type of command is a stream, which has only an output.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pipe  (nql)"),(0,l.kt)("td",{parentName:"tr",align:null},"A sequence of commands that process collections of objects. A pipeline is defined by an nql expression.")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"example-1"},"Example 1"),(0,l.kt)("h3",{id:"scenario"},"Scenario"),(0,l.kt)("p",null,"Select the ten oldest people in the ",(0,l.kt)("inlineCode",{parentName:"p"},"IT")," department and display the full names of these people."),(0,l.kt)("h3",{id:"nql-query"},"NQL Query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'(1) records {test_data} | (2) set fullName = concat(fName, lName, delimiter=",")  | (3) where dep="IT"  | (4) aggr fName=first(fName), lName=first(lName), ctry=first(ctry), age=first(age), docs=first(docs), host=first(host), PD=max(PD), Balance=max(balance) by fullName | (5) sort age desc | (6) limit 10\n')),(0,l.kt)("h3",{id:"description"},"Description"),(0,l.kt)("p",null,"Below is a step-by-step explanation of NQL Query."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"records"))),(0,l.kt)("p",null,"Get the objects from the test database.  "),(0,l.kt)("p",null,"Result:  \t"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "fName": "Jake",\n    "lName": "White",\n    "dep": "HR",\n    "ctry": "DE",\n    "age": 56,\n    "host": "www.facebook.com",\n    "docs": [\n        "IDCard",\n        "Passport",\n        "DrivingLicense"\n    ],\n    "PD": 0.43859708144526346,\n    "ts": 1673755017972,\n    "balance": 9966.23\n},\n{\n    "fName": "Jack",\n    "lName": "Magenta",\n    "dep": "HR",\n    "ctry": "PL",\n    "age": 27,\n    "host": "pl.wikipedia.org",\n    "docs": [\n        "Passport"\n    ],\n    "PD": 0.511210222043333,\n    "ts": 1674845669100,\n    "balance": 5556.47\n},\n{\n    "fName": "Harry",\n    "lName": "Watermelon",\n    "dep": "HR",\n    "ctry": "US",\n    "age": 49,\n    "host": "www.google.com",\n    "docs": [\n        "Passport"\n    ],\n    "PD": 0.3029903276018222,\n    "ts": 1673763725949,\n    "balance": 7404.62\n},\n{"...":"..."}\n')),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"concat"))),(0,l.kt)("p",null,"Add a new field containing first and last names separated by a comma."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'set fullName = concat(fName, lName, delimiter=",")\n')),(0,l.kt)("p",null,"Result:  \t"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "fName": "Jake",\n    "lName": "White",\n    "dep": "HR",\n    "ctry": "DE",\n    "age": 56,\n    "host": "www.facebook.com",\n    "docs": [\n        "IDCard",\n        "Passport",\n        "DrivingLicense"\n    ],\n    "PD": 0.43859708144526346,\n    "ts": 1673755017972,\n    "balance": 9966.23,\n    "fullName":"Jake,White"\n},\n{\n    "fName": "Jack",\n    "lName": "Magenta",\n    "dep": "HR",\n    "ctry": "PL",\n    "age": 27,\n    "host": "pl.wikipedia.org",\n    "docs": [\n        "Passport"\n    ],\n    "PD": 0.511210222043333,\n    "ts": 1674845669100,\n    "balance": 5556.47, \n    "fullName":"Jake,Magenta"\n},\n{\n    "fName": "Harry",\n    "lName": "Watermelon",\n    "dep": "HR",\n    "ctry": "US",\n    "age": 49,\n    "host": "www.google.com",\n    "docs": [\n        "Passport"\n    ],\n    "PD": 0.3029903276018222,\n    "ts": 1673763725949,\n    "balance": 7404.62, \n    "fullName":"Harry,Watermelon"\n},\n{"...":"..."}\n')),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"where"))),(0,l.kt)("p",null,'Select only those people who belong to the "IT" department.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'where dep="IT"\n')),(0,l.kt)("p",null,"Result:  \t"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "lName": "Blue",\n    "fName": "Jack",\n    "dep":"IT",\n    "docs": [\n        "Passport"\n    ],      \n    "PD": 0.8441553273619709,\n    "ctry": "PL",\n    "host": "www.linkedin.com",\n    "balance": 8899.6,\n    "age": 60,\n    "fullName" : "Jack,Blue"\n},\n{\n    "lName": "Yellow",\n    "fName": "Jacob",\n    "dep":"IT",\n    "docs": [\n        "IDCard",\n        "Passport"\n    ],      \n    "PD": 0.8416937579622111,\n    "ctry": "IE",\n    "host": "www.google.com",\n    "balance": 9376.34,\n    "age": 60,\n    "fullName" : "Jacob,Yellow"\n}\n,\n{"...":"..."}\n')),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"aggr")),(0,l.kt)("p",{parentName:"li"},"The data contains several values of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Balance")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"PD")," fields for a person at different ",(0,l.kt)("inlineCode",{parentName:"p"},"ts")," times.\nWe want to display only one object for each person. To do this, we need to aggregate the data by full name (",(0,l.kt)("inlineCode",{parentName:"p"},"fullName")," field), taking the maximum values of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Balance")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"PD")," fields. The value of the fullName field by which we aggregate will be stored in the aggregation field ",(0,l.kt)("inlineCode",{parentName:"p"},"_id"),"."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"aggr fName=first(fName), lName=first(lName), ctry=first(ctry), age=first(age), docs=first(docs), host=first(host), PD=max(PD), Balance=max(balance) by fullName \n")),(0,l.kt)("p",null,"Result:  \t"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "lName": "Blue",\n    "fName": "Jack",\n    "docs": [\n        "Passport"\n    ],\n    "PD": 0.8441553273619709,\n    "ctry": "PL",\n    "host": "www.linkedin.com",\n    "balance": 8899.6,\n    "_id": [\n        "Jack,Blue"\n    ],\n    "age": 60\n},\n{\n    "lName": "Yellow",\n    "fName": "Jacob",\n    "docs": [\n        "IDCard",\n        "Passport"\n    ],\n    "PD": 0.8416937579622111,\n    "ctry": "IE",\n    "host": "www.google.com",\n    "balance": 9376.34,\n    "_id": [\n        "Jacob,Yellow"\n    ],\n    "age": 60\n},\n{"...":"..."}\n')),(0,l.kt)("ol",{start:5},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"sort")),(0,l.kt)("p",{parentName:"li"},"Sort the results by the age of the people starting with the oldest (desc)."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sort age desc\n")),(0,l.kt)("ol",{start:6},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"limit")),(0,l.kt)("p",{parentName:"li"},"Select the first ten people from a previously sorted list."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"limit 10\n")),(0,l.kt)("p",null,"Result:  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "lName": "Blue",\n        "fName": "Jack",\n        "docs": [\n            "Passport"\n        ],\n        "PD": 0.8441553273619709,\n        "ctry": "PL",\n        "host": "www.linkedin.com",\n        "balance": 8899.6,\n        "_id": [\n            "Jack,Blue"\n        ],\n        "age": 60\n    },\n    {\n        "lName": "Yellow",\n        "fName": "Jacob",\n        "docs": [\n            "IDCard",\n            "Passport"\n        ],\n        "PD": 0.8416937579622111,\n        "ctry": "IE",\n        "host": "www.google.com",\n        "balance": 9376.34,\n        "_id": [\n            "Jacob,Yellow"\n        ],\n        "age": 60\n    },\n    {\n        "lName": "Miedziany",\n        "fName": "Olive",\n        "docs": [\n            "IDCard",\n            "Passport"\n        ],\n        "PD": 0.8762584426876398,\n        "ctry": "IE",\n        "host": "www.linkedin.com",\n        "balance": 8586.93,\n        "_id": [\n            "Olive,Miedziany"\n        ],\n        "age": 59\n    },\n    {\n        "lName": "Cinnamon",\n        "fName": "Neil",\n        "docs": [\n            "Passport"\n        ],\n        "PD": 0.9939145170408105,\n        "ctry": "DE",\n        "host": "www.google.com",\n        "balance": 8096.58,\n        "_id": [\n            "Neil,Cinnamon"\n        ],\n        "age": 57\n    },\n    ,\n{"...":"..."}\n]\n')),(0,l.kt)("h3",{id:"example-2"},"Example 2"),(0,l.kt)("h3",{id:"scenario-1"},"Scenario"),(0,l.kt)("p",null,"For each person, display the current balance along with the date from which this balance is valid."),(0,l.kt)("h3",{id:"nql-query-method-1"},"NQL Query method 1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"records {test_data} | (1) sort ts desc | (2) aggr latestBalance=first(balance),latestPD=first(PD)  by fName, lName unwind=true\n\n")),(0,l.kt)("h3",{id:"description-1"},"Description"),(0,l.kt)("p",null,"Below is a step-by-step explanation of NQL Query."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"sort")),(0,l.kt)("p",{parentName:"li"},"Sort collections by ",(0,l.kt)("inlineCode",{parentName:"p"},"ts")," field from the largest value (desc)."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sort ts desc\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"aggr")),(0,l.kt)("p",{parentName:"li"},"Select the values of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Balance")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"PD")," fields from the first object found from the aggregated data by the ",(0,l.kt)("inlineCode",{parentName:"p"},"fName")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"lName")," fields.\nThe previous command sorted the values by ",(0,l.kt)("inlineCode",{parentName:"p"},"ts ")," in descending order, so if we select in this step the value of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Balance")," field and ",(0,l.kt)("inlineCode",{parentName:"p"},"PD"),"\nfield from the first object encountered, these will be the values for the maximum `ts``, i.e. the last ones."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"aggr latestBalance=first(balance),latestPD=first(PD)  by fName, lName unwind=true\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "lName": "Amber",\n        "fName": "Matt",\n        "latestBalance": 8540.07,\n        "latestPD": 0.3231355816784073\n    },\n    {\n        "lName": "Oliwkowy",\n        "fName": "Olive",\n        "latestBalance": 595.67,\n        "latestPD": 0.6249965829144613\n    },\n    {\n        "lName": "Magenta",\n        "fName": "Jack",\n        "latestBalance": 3772.04,\n        "latestPD": 0.2969195237000811\n    },\n    {\n        "lName": "Ruby",\n        "fName": "Paul",\n        "latestBalance": 4879.27,\n        "latestPD": 0.006748252054172954\n    },\n    {\n        "lName": "Yellow",\n        "fName": "Richard",\n        "latestBalance": 4011.64,\n        "latestPD": 0.5387816649690332\n    },  \n{"...":"..."}\n]\n')),(0,l.kt)("h3",{id:"nql-query-method-2"},"NQL Query method 2"),(0,l.kt)("p",null,"Sequence of three NQLs:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'records {test_data} | (1) dst "collTestData" \n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'(2) coll "collTestData" | (3) fork ( (3.1) set fullName=concat(fName, " ", lName) | dst "data3"), ( (3.2) aggr latestTs=max(ts)by fName, lName unwind=true | dst "data4") \n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'(4) coll "data3" | (5) set latestTs=valColl("data4", "latestTs", {"fName":fName, "lName":lName}) | (6) where $eq(latestTs,ts) | (7) sort fullName\n')),(0,l.kt)("h3",{id:"description-2"},"Description"),(0,l.kt)("p",null,"Below is a step-by-step explanation of NQL Query."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"dst ",(0,l.kt)("inlineCode",{parentName:"strong"},"collTestData"))," \t")),(0,l.kt)("p",null,"Prepare a collector with test data."),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 990,\n    "data": [\n        {\n            "lName": "White",\n            "fName": "Jake",\n            "docs": [\n                "IDCard",\n                "Passport",\n                "DrivingLicense"\n            ],\n            "PD": 0.43859708144526344,\n            "ctry": "DE",\n            "host": "www.facebook.com",\n            "balance": 9966.23,\n            "dep": "HR",\n            "age": 56,\n            "ts": 1673755017972\n        },\n        {\n            "lName": "Magenta",\n            "fName": "Jack",\n            "docs": [\n                "Passport"\n            ],\n            "PD": 0.511210222043333,\n            "ctry": "PL",\n            "host": "pl.wikipedia.org",\n            "balance": 5556.47,\n            "dep": "HR",\n            "age": 27,\n            "ts": 1674845669100\n        },\n        ...\n    ]\n}\n\n')),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"coll ",(0,l.kt)("inlineCode",{parentName:"strong"},"collTestData")))),(0,l.kt)("p",null,'Get the test data from the "collTestData" collector '),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"fork"))),(0,l.kt)("p",null,"Execute two NQLs in parallel."),(0,l.kt)("p",null,"3.1 ",(0,l.kt)("strong",{parentName:"p"},"set, dst")," "),(0,l.kt)("p",null,"Add a new field ",(0,l.kt)("inlineCode",{parentName:"p"},"fullName")," which is a composite of the values of the fields: ",(0,l.kt)("inlineCode",{parentName:"p"},"Name")," , ",(0,l.kt)("inlineCode",{parentName:"p"},'" "')," (space) and ",(0,l.kt)("inlineCode",{parentName:"p"},"Name"),'.\nStore the result to a collector with id "data3".'),(0,l.kt)("p",null,"Result:  "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 990,\n    "data": [\n        {\n            "lName": "White",\n            "fName": "Jake",\n            "docs": [\n                "IDCard",\n                "Passport",\n                "DrivingLicense"\n            ],\n            "PD": 0.43859708144526344,\n            "ctry": "DE",\n            "host": "www.facebook.com",\n            "balance": 9966.23,\n            "dep": "HR",\n            "age": 56,\n            "ts": 1673755017972,\n            "fullName": "Jake White"\n        },\n        {\n            "lName": "Magenta",\n            "fName": "Jack",\n            "docs": [\n                "Passport"\n            ],\n            "PD": 0.511210222043333,\n            "ctry": "PL",\n            "host": "pl.wikipedia.org",\n            "balance": 5556.47,\n            "dep": "HR",\n            "age": 27,\n            "ts": 1674845669100,\n            "fullName": "Jack Magenta"\n        },\n        ...\n    ]\n}\n')),(0,l.kt)("p",null,"3.2 ",(0,l.kt)("strong",{parentName:"p"},"aggr, dst")),(0,l.kt)("p",null,"Calculate the maximum timestamp (",(0,l.kt)("inlineCode",{parentName:"p"},"latestTs"),') for each person and store the result to the collector with id "data4".'),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 99,\n    "data": [\n        {\n            "lName": "White",\n            "fName": "Jake",\n            "latestTs": 1675018088389\n        },\n        {\n            "lName": "Magenta",\n            "fName": "Jack",\n            "latestTs": 1675201265593\n        },\n        {\n            "lName": "Watermelon",\n            "fName": "Harry",\n            "latestTs": 1674670980569\n        },\n        ...\n    ]\n}\n')),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},'coll "data3"'))),(0,l.kt)("p",null,'Get test data from the collector "data3".'),(0,l.kt)("ol",{start:5},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"set, valColl"))),(0,l.kt)("p",null,'To all objects from collectior "data3" add the field ',(0,l.kt)("inlineCode",{parentName:"p"},"latestTs"),' of which value is taken for each person from the collector "data4".'),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 990,\n    "data": [\n        {\n            "lName": "White",\n            "fName": "Jake",\n            "docs": [\n                "IDCard",\n                "Passport",\n                "DrivingLicense"\n            ],\n            "PD": 0.43859708144526344,\n            "ctry": "DE",\n            "host": "www.facebook.com",\n            "balance": 9966.23,\n            "dep": "HR",\n            "age": 56,\n            "ts": 1673755017972,\n            "fullName": "Jake White",\n            "latestTs": null\n        },\n        {\n            "lName": "Magenta",\n            "fName": "Jack",\n            "docs": [\n                "Passport"\n            ],\n            "PD": 0.511210222043333,\n            "ctry": "PL",\n            "host": "pl.wikipedia.org",\n            "balance": 5556.47,\n            "dep": "HR",\n            "age": 27,\n            "ts": 1674845669100,\n            "fullName": "Jack Magenta",\n            "latestTs": null\n        },\n        ...\n    ]\n}\n')),(0,l.kt)("ol",{start:6},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"where"))),(0,l.kt)("p",null,"From the previously prepared set of objects (people), select only those for which ",(0,l.kt)("inlineCode",{parentName:"p"},"latestTs")," equals ",(0,l.kt)("inlineCode",{parentName:"p"},"ts"),".\nThese are the objects containing the most recent (latest) ",(0,l.kt)("inlineCode",{parentName:"p"},"PD")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"balance")," values. "),(0,l.kt)("ol",{start:7},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"sort"))),(0,l.kt)("p",null,"Sort the result."),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 99,\n    "data": [\n        {\n            "lName": "Amber",\n            "fName": "Connor",\n            "docs": [\n                "IDCard",\n                "Passport",\n                "DrivingLicense"\n            ],\n            "PD": 0.48863820141709124,\n            "ctry": "IE",\n            "host": "www.linkedin.com",\n            "balance": 1440.24,\n            "dep": "ADM",\n            "age": 24,\n            "ts": 1675165590523,\n            "fullName": "Connor Amber",\n            "latestTs": 1675165590523\n        },\n        {\n            "lName": "Green",\n            "fName": "Connor",\n            "docs": [\n                "IDCard",\n                "Passport",\n                "DrivingLicense"\n            ],\n            "PD": 0.5409617064298299,\n            "ctry": "IE",\n            "host": "www.google.com",\n            "balance": 5851.46,\n            "dep": "ADM",\n            "age": 31,\n            "ts": 1674903306796,\n            "fullName": "Connor Green",\n            "latestTs": 1674903306796\n        },\n        ...\n    ]\n}\n')),(0,l.kt)("h2",{id:"example-3"},"Example 3"),(0,l.kt)("h3",{id:"scenario-2"},"Scenario"),(0,l.kt)("p",null,"Add a new ",(0,l.kt)("inlineCode",{parentName:"p"},"fullName")," field to all objects, sort and display it, and in parallel perform data aggregation. To do this, perform three NQLs."),(0,l.kt)("h3",{id:"nql-query-1"},"NQL Query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'records {test_data} | (1) dst "collTestData"  \n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'(2) coll "collTestData" | (3) fork (set fullName=concat(fName, " ", lName) | limit 100 | dst "collData1"), ( aggr fieldsCount=sum(age) by fName,lName maxBuckets=2 | dst "collData2")  \n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'(4) coll "collData1" | (5) sort fullName     \n')),(0,l.kt)("h3",{id:"description-3"},"Description"),(0,l.kt)("p",null,"Below is a step-by-step explanation of NQL Query."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"dst")),(0,l.kt)("p",{parentName:"li"},"Store all objects from ",(0,l.kt)("inlineCode",{parentName:"p"},"{test_data}")," to a new collector with the identifier ",(0,l.kt)("inlineCode",{parentName:"p"},"collTestData"),"."))),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 990,\n    "data": [\n        {\n            "lName": "White",\n            "fName": "Jake",\n            "docs": [\n                "IDCard",\n                "Passport",\n                "DrivingLicense"\n            ],\n            "PD": 0.43859708144526344,\n            "balance": 9966.23,\n            "ctry": "DE",\n            "host": "www.facebook.com",\n            "dep": "HR",\n            "age": 56,\n            "ts": 1673755017972\n        },\n        {\n            "lName": "Magenta",\n            "fName": "Jack",\n            "docs": [\n                "Passport"\n            ],\n            "PD": 0.511210222043333,\n            "balance": 5556.47,\n            "ctry": "PL",\n            "host": "pl.wikipedia.org",\n            "dep": "HR",\n            "age": 27,\n            "ts": 1674845669100\n        },\n        ...\n    ]\n}\n')),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"coll")),(0,l.kt)("p",{parentName:"li"},"The previously created data collector ",(0,l.kt)("inlineCode",{parentName:"p"},"collTestData")," is the data source for the next step NQL.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"fork")),(0,l.kt)("p",{parentName:"li"},"On the data from the collector ",(0,l.kt)("inlineCode",{parentName:"p"},"collTestData")," perform two NQLs in parallel: ",(0,l.kt)("inlineCode",{parentName:"p"},"set...")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"aggr..."),".\nEach of them stores its results to the newly created collectors ",(0,l.kt)("inlineCode",{parentName:"p"},"collData1")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"collData1"),"."))),(0,l.kt)("p",null,"Result for ",(0,l.kt)("inlineCode",{parentName:"p"},"set...")," stored in ",(0,l.kt)("inlineCode",{parentName:"p"},"collData1")," collector:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 100,\n    "data": [\n        {\n            "lName": "White",\n            "fName": "Jake",\n            "docs": [\n                "IDCard",\n                "Passport",\n                "DrivingLicense"\n            ],\n            "PD": 0.43859708144526344,\n            "balance": 9966.23,\n            "ctry": "DE",\n            "host": "www.facebook.com",\n            "dep": "HR",\n            "age": 56,\n            "ts": 1673755017972,\n            "fullName": "Jake White"\n        },\n        {\n            "lName": "Magenta",\n            "fName": "Jack",\n            "docs": [\n                "Passport"\n            ],\n            "PD": 0.511210222043333,\n            "balance": 5556.47,\n            "ctry": "PL",\n            "host": "pl.wikipedia.org",\n            "dep": "HR",\n            "age": 27,\n            "ts": 1674845669100,\n            "fullName": "Jack Magenta"\n        },\n        ...\n    ]\n}\n')),(0,l.kt)("p",null,"Result for ",(0,l.kt)("inlineCode",{parentName:"p"},"aggr...")," stored in ",(0,l.kt)("inlineCode",{parentName:"p"},"collData2")," collector:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 2,\n    "data": [\n        {\n            "fieldsCount": 560,\n            "_id": [\n                "Jake",\n                "White"\n            ]\n        },\n        {\n            "fieldsCount": 270,\n            "_id": [\n                "Jack",\n                "Magenta"\n            ]\n        }\n    ]\n}\n')),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"coll")),(0,l.kt)("p",{parentName:"li"},'The result of the NQL ("set...") from the previous step , stored in the collector ',(0,l.kt)("inlineCode",{parentName:"p"},"collData1"),", is the data source for the next NQL.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"sort")),(0,l.kt)("p",{parentName:"li"},"Sort the data from the collector ",(0,l.kt)("inlineCode",{parentName:"p"},"collData1")," and display the result.  "))),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 100,\n    "data": [\n        {\n            "lName": "Amber",\n            "fName": "Connor",\n            "docs": [\n                "IDCard",\n                "Passport",\n                "DrivingLicense"\n            ],\n            "PD": 0.7200228784043261,\n            "balance": 1118.7,\n            "ctry": "IE",\n            "host": "www.linkedin.com",\n            "dep": "ADM",\n            "age": 24,\n            "ts": 1673615235896,\n            "fullName": "Connor Amber"\n        },\n        {\n            "lName": "Green",\n            "fName": "Connor",\n            "docs": [\n                "IDCard",\n                "Passport",\n                "DrivingLicense"\n            ],\n            "PD": 0.8421159777008483,\n            "balance": 7882.33,\n            "ctry": "IE",\n            "host": "www.google.com",\n            "dep": "ADM",\n            "age": 31,\n            "ts": 1673976067457,\n            "fullName": "Connor Green"\n        },\n        ...\n    ]\n}\n')),(0,l.kt)("p",null,"In this example, the data from the aggregation is ignored in further processing and not displayed at the end."),(0,l.kt)("h2",{id:"example-4"},"Example 4"),(0,l.kt)("h3",{id:"scenario-3"},"Scenario"),(0,l.kt)("p",null,"Calculate the average value of a person's balance and add it to each person object in the source table."),(0,l.kt)("h3",{id:"nql-query-2"},"NQL Query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'records "test_data" | (1) aggr avgBalance=avg(balance) by fName, lName unwind=true | (2) dst "avgBalanceColl" \n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'records "test_data" | (3) set avgBalance=valColl("avgBalance", "avgBalance", {"fName":fName, "lName":lName}) \n')),(0,l.kt)("h3",{id:"description-4"},"Description"),(0,l.kt)("p",null,"Below is a step-by-step explanation of NQL Query."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Calculate the average balance value for a person and save it in the ",(0,l.kt)("inlineCode",{parentName:"p"},"avgBalance")," field.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Save the results to the collector with id ",(0,l.kt)("inlineCode",{parentName:"p"},"avgBalanceColl"),". ")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},'For each person from the "test_data" collection, add the field ',(0,l.kt)("inlineCode",{parentName:"p"},"avgBalance")," whose value is taken from the collector ",(0,l.kt)("inlineCode",{parentName:"p"},"avgBalanceColl"),"\nfrom the field ",(0,l.kt)("inlineCode",{parentName:"p"},"avgBalance")," of the object selected in this collector after the filter\n",(0,l.kt)("inlineCode",{parentName:"p"},"avgBalanceColl.fName = test_data.fName and avgBalanceColl.lName = test_data.lName"),"."))),(0,l.kt)("h2",{id:"example-5-real-data-from-the-network"},"Example 5 (real data from the network)"),(0,l.kt)("p",null,"Display five IP clients for which we have the most data."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},'src stream="netflow"  | isIp(clientIp) | aggr countClientIp=count(clientIp) by clientIp as client unwind=true | sort countClientIp desc | limit 5')),(0,l.kt)("h3",{id:"description-5"},"Description"),(0,l.kt)("p",null,"Below is a step-by-step explanation of NQL Query."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Get data from the netflow stream.")),(0,l.kt)("p",null,"Result (first two objects):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 92460,\n    "data": [\n        {\n            "_stream": "netflow",\n            "timestamp": 1677225660000,\n            "sessionId": 1727,\n            "clientIp": "172.16.70.220",\n            "serverIp": "172.16.10.11",\n            "protocol": 6,\n            "clientPort": 60236,\n            "serverPort": 49666,\n            "application": 49666,\n            "exporterIps": [\n                "172.16.100.1"\n            ],\n            "interfaces": [\n                "172.16.100.1[58]",\n                "172.16.100.1[5]"\n            ],\n            "clientFunction": [\n                "Workstations"\n            ],\n            "serverFunction": [\n                "Workstations"\n            ],\n            "clientLocation": [],\n            "serverLocation": [],\n            "clientRole": [],\n            "serverRole": [],\n            "clientTcpFlags": 0,\n            "serverTcpFlags": 0,\n            "tosNumbers": [],\n            "mpls": [],\n            "asNumbers": [],\n            "icmpType": [],\n            "clientCountry": null,\n            "serverCountry": null,\n            "clientAsNumber": null,\n            "serverAsNumber": null,\n            "activeTime": 92,\n            "firstTimestamp": 1677225416260,\n            "lastTimestamp": 1677225416352,\n            "clientBytes": 3756,\n            "serverBytes": 1878,\n            "clientPackets": 10,\n            "serverPackets": 9,\n            "flows": 2,\n            "customField1036": null\n        },\n        {\n            "_stream": "netflow",\n            "timestamp": 1677225660000,\n            "sessionId": 1729,\n            "clientIp": "172.16.20.75",\n            "serverIp": "8.253.186.44",\n            "protocol": 6,\n            "clientPort": 51310,\n            "serverPort": 80,\n            "application": 80,\n            "exporterIps": [\n                "172.16.100.1"\n            ],\n            "interfaces": [\n                "172.16.100.1[3]",\n                "172.16.100.1[5]"\n            ],\n            "clientFunction": [\n                "Workstations"\n            ],\n            "serverFunction": [],\n            "clientLocation": [],\n            "serverLocation": [],\n            "clientRole": [],\n            "serverRole": [],\n            "clientTcpFlags": 0,\n            "serverTcpFlags": 0,\n            "tosNumbers": [],\n            "mpls": [],\n            "asNumbers": [],\n            "icmpType": [],\n            "clientCountry": null,\n            "serverCountry": null,\n            "clientAsNumber": null,\n            "serverAsNumber": null,\n            "activeTime": 121156,\n            "firstTimestamp": 1677225274816,\n            "lastTimestamp": 1677225395972,\n            "clientBytes": 80,\n            "serverBytes": 40,\n            "clientPackets": 2,\n            "serverPackets": 1,\n            "flows": 2,\n            "customField1036": null\n        }\n        ...\n    ]\n}\n\n')),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Select only those objects in which the ",(0,l.kt)("inlineCode",{parentName:"li"},"clientIp")," field contains the actual value ip4 or ip6.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"| isIp(clientIp)")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Calculate the number of objects for each client ip.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"| aggr countClientIp=count(clientIp) by clientIp as client unwind=true")),(0,l.kt)("p",null,"Result (first three values):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{    \n    "total": 364,\n    "data": [\n        {\n            "countClientIp": 542,\n            "client": "172.16.70.220"\n        },\n        {\n            "countClientIp": 925,\n            "client": "172.16.20.75"\n        },\n        {\n            "countClientIp": 2139,\n            "client": "172.16.20.141"\n        }\n        ...\n    ]\n}\n')),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Sort the results from the largest value of countClientIp.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Select the first 5 objects from the result."))),(0,l.kt)("p",null,"Wynik:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{   \n    "total": 5,\n    "data": [\n        {\n            "countClientIp": 15744,\n            "client": "172.16.70.36"\n        },\n        {\n            "countClientIp": 12255,\n            "client": "172.16.60.107"\n        },\n        {\n            "countClientIp": 6888,\n            "client": "172.16.10.11"\n        },\n        {\n            "countClientIp": 4520,\n            "client": "172.16.70.108"\n        },\n        {\n            "countClientIp": 3777,\n            "client": "172.16.20.59"\n        }\n    ]\n}\n')),(0,l.kt)("h2",{id:"example-6-real-data-from-the-network"},"Example 6 (real data from the network)"),(0,l.kt)("h3",{id:"scenario-4"},"Scenario"),(0,l.kt)("p",null,"Display ten protocols with the highest network traffic."),(0,l.kt)("h3",{id:"nql-query-3"},"NQL Query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'src stream="netflowByProtocolAggr" \n| aggr sumClientBytes=sum(clientBytes),sumServerBytes=sum(serverBytes),sumClientPackets=sum(clientPackets),sumServerPackets=sum(serverPackets),sumFlows=sum(flows) by protocol as protocolName unwind=true \n| set _sumBytes1=add(sumClientBytes,sumServerBytes),_sumClientBitsPerSecond4=div(mul(sumClientBytes,8),60),_sumServerBitsPerSecond5=div(mul(sumServerBytes,8),60),_sumPacketsPerSecond6=div(add(sumClientPackets,sumServerPackets),60),_sumFlowsPerSecond7=div(sumFlows, 60) \n| fork (aggr _sumBytes1=sum(_sumBytes1), _sumClientBytes2=sum(sumClientBytes), _sumServerBytes3=sum(sumServerBytes), _sumClientBitsPerSecond4=sum(_sumClientBitsPerSecond4),_sumServerBitsPerSecond5=sum(_sumServerBitsPerSecond5), _sumPacketsPerSecond6=sum(_sumPacketsPerSecond6), _sumFlowsPerSecond7=sum(_sumFlowsPerSecond7), total=count(1) | set protocolName="Total", _isTotalRow=true), (sort _sumBytes1 desc | limit 10) \n\n')),(0,l.kt)("h3",{id:"description-6"},"Description"),(0,l.kt)("p",null,"Below is a step-by-step explanation of NQL Query."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},'Select data from the stream "netflowByProtocolAggr".')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'src stream="netflowByProtocolAggr" \n')),(0,l.kt)("p",null,"Reesult:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"total": 2048,\n    "data": [\n        {\n            "_stream": "netflowByProtocolAggr",\n            "timestamp": 1677196980000,\n            "protocol": 17,\n            "tenantId": 1284495119,\n            "activeTime": 14978853,\n            "clientBytes": 44116491,\n            "serverBytes": 160063,\n            "clientPackets": 117479,\n            "serverPackets": 1045,\n            "flows": 1566,\n            "sessions": 676\n        },\n        {\n            "_stream": "netflowByProtocolAggr",\n            "timestamp": 1677196980000,\n            "protocol": 1,\n            "tenantId": 1284495119,\n            "activeTime": 1120484,\n            "clientBytes": 1228,\n            "serverBytes": 399559,\n            "clientPackets": 23,\n            "serverPackets": 1263,\n            "flows": 112,\n            "sessions": 23\n        },\n        {\n            "_stream": "netflowByProtocolAggr",\n            "timestamp": 1677196980000,\n            "protocol": 2,\n            "tenantId": 1284495119,\n            "activeTime": 79982,\n            "clientBytes": 0,\n            "serverBytes": 1224,\n            "clientPackets": 0,\n            "serverPackets": 34,\n            "flows": 2,\n            "sessions": 1\n        }\n    ]\n}\n\n')),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Calculate the sum of the values of the ",(0,l.kt)("inlineCode",{parentName:"p"},"clientBytes"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"serverBytes"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"clientPackets")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"serverPackets")," fields for each protocol."),(0,l.kt)("p",{parentName:"li"},"Set ",(0,l.kt)("inlineCode",{parentName:"p"},"unwind=true")," then the value of the field ",(0,l.kt)("inlineCode",{parentName:"p"},"protocol")," will be in the resulting object in the field named ",(0,l.kt)("inlineCode",{parentName:"p"},"protocolName"),", otherwise the value would be returned in the field ",(0,l.kt)("inlineCode",{parentName:"p"},"_id:[<protocol>]")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"| aggr sumClientBytes=sum(clientBytes),\n       sumServerBytes=sum(serverBytes), \n       sumClientPackets=sum(clientPackets),\n       sumServerPackets=sum(serverPackets), \n       sumFlows=sum(flows) \n  by protocol as protocolName unwind=true \n  \n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{   \n    "total": 5,\n    "data": [\n        {\n            "protocolName": 17,\n            "sumClientBytes": 27629261045,\n            "sumServerBytes": 200320556,\n            "sumClientPackets": 73431273,\n            "sumServerPackets": 736372,\n            "sumFlows": 787521\n        },\n        {\n            "protocolName": 1,\n            "sumClientBytes": 771406,\n            "sumServerBytes": 210319829,\n            "sumClientPackets": 13398,\n            "sumServerPackets": 706733,\n            "sumFlows": 63849\n        },\n        {\n            "protocolName": 2,\n            "sumClientBytes": 0,\n            "sumServerBytes": 227536,\n            "sumClientPackets": 0,\n            "sumServerPackets": 6318,\n            "sumFlows": 491\n        },\n        {\n            "protocolName": 6,\n            "sumClientBytes": 1873217764,\n            "sumServerBytes": 11520014000,\n            "sumClientPackets": 16168561,\n            "sumServerPackets": 9237395,\n            "sumFlows": 884914\n        },\n        {\n            "protocolName": 58,\n            "sumClientBytes": 0,\n            "sumServerBytes": 192648,\n            "sumClientPackets": 0,\n            "sumServerPackets": 3514,\n            "sumFlows": 765\n        }\n    ]\n}\n')),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Add fields whose values are the result of the following arithmetic expressions:")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"_sumBytes1 = sumClientBytes + sumServerBytes"),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"_sumClientBitsPerSecond4 =  (sumClientBytes * 8) / 60"),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"_sumServerBitsPerSecond5 =  (sumServerBytes * 8) / 60"),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"_sumPacketsPerSecond6 =  (sumClientPackets + sumServerPackets) / 60"),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"_sumFlowsPerSecond7 = sumFlows / 60"),"\n",(0,l.kt)("inlineCode",{parentName:"p"},"_sumFlowsPerSecond7 = sumFlows / 60")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"| set _sumBytes1=add(sumClientBytes,sumServerBytes), \n      _sumClientBitsPerSecond4=div(mul(sumClientBytes,8),60), \n      _sumServerBitsPerSecond5=div(mul(sumServerBytes,8),60), \n      _sumPacketsPerSecond6=div(add(sumClientPackets,sumServerPackets),60), \n      _sumFlowsPerSecond7=div(sumFlows, 60)      \n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{   \n    "total": 5,\n    "data": [\n        {\n            "protocolName": 17,\n            "sumClientBytes": 27629261045,\n            "sumServerBytes": 200320556,\n            "sumClientPackets": 73431273,\n            "sumServerPackets": 736372,\n            "sumFlows": 787521,\n            "_sumBytes1": 27829581601,\n            "_sumClientBitsPerSecond4": 3683901472.6666665,\n            "_sumServerBitsPerSecond5": 26709407.466666665,\n            "_sumPacketsPerSecond6": 1236127.4166666667,\n            "_sumFlowsPerSecond7": 13125.35\n        },\n        {\n            "protocolName": 1,\n            "sumClientBytes": 771406,\n            "sumServerBytes": 210319829,\n            "sumClientPackets": 13398,\n            "sumServerPackets": 706733,\n            "sumFlows": 63849,\n            "_sumBytes1": 211091235,\n            "_sumClientBitsPerSecond4": 102854.13333333333,\n            "_sumServerBitsPerSecond5": 28042643.866666667,\n            "_sumPacketsPerSecond6": 12002.183333333332,\n            "_sumFlowsPerSecond7": 1064.15\n        },\n        {\n            "protocolName": 2,\n            "sumClientBytes": 0,\n            "sumServerBytes": 227536,\n            "sumClientPackets": 0,\n            "sumServerPackets": 6318,\n            "sumFlows": 491,\n            "_sumBytes1": 227536,\n            "_sumClientBitsPerSecond4": 0.0,\n            "_sumServerBitsPerSecond5": 30338.133333333335,\n            "_sumPacketsPerSecond6": 105.3,\n            "_sumFlowsPerSecond7": 8.183333333333334\n        },\n        {\n            "protocolName": 6,\n            "sumClientBytes": 1873217764,\n            "sumServerBytes": 11520014000,\n            "sumClientPackets": 16168561,\n            "sumServerPackets": 9237395,\n            "sumFlows": 884914,\n            "_sumBytes1": 13393231764,\n            "_sumClientBitsPerSecond4": 249762368.53333333,\n            "_sumServerBitsPerSecond5": 1536001866.6666667,\n            "_sumPacketsPerSecond6": 423432.6,\n            "_sumFlowsPerSecond7": 14748.566666666668\n        },\n        {\n            "protocolName": 58,\n            "sumClientBytes": 0,\n            "sumServerBytes": 192648,\n            "sumClientPackets": 0,\n            "sumServerPackets": 3514,\n            "sumFlows": 765,\n            "_sumBytes1": 192648,\n            "_sumClientBitsPerSecond4": 0.0,\n            "_sumServerBitsPerSecond5": 25686.4,\n            "_sumPacketsPerSecond6": 58.56666666666667,\n            "_sumFlowsPerSecond7": 12.75\n        }\n    ]\n}\n')),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"Show results.")),(0,l.kt)("p",null,"Show ten aggregation results by protocol from the highest value of the sum of the\n",(0,l.kt)("inlineCode",{parentName:"p"},"sumClientBytes")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"sumServerBytes "),"fields and one object containing the summed all values (total) of the fields\n",(0,l.kt)("inlineCode",{parentName:"p"},"_sumBytes1, sumClientBytes, sumServerBytes, _sumClientBitsPerSecond4, _sumServerBitsPerSecond5 and _sumPacketsPerSecond6, _sumFlowsPerSecond7"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'| fork (aggr _sumBytes1=sum(_sumBytes1), \n             _sumClientBytes2=sum(sumClientBytes), \n             _sumServerBytes3=sum(sumServerBytes), \n             _sumClientBitsPerSecond4=sum(_sumClientBitsPerSecond4),\n             _sumServerBitsPerSecond5=sum(_sumServerBitsPerSecond5), \n             _sumPacketsPerSecond6=sum(_sumPacketsPerSecond6), \n             _sumFlowsPerSecond7=sum(_sumFlowsPerSecond7), \n             total=count(1) | set protocolName="Total", _isTotalRow=true), (sort _sumBytes1 desc | limit 10) \n')),(0,l.kt)("p",null,"Result:"),(0,l.kt)("p",null,"The first object in the following list (",(0,l.kt)("inlineCode",{parentName:"p"},"protocolName: Total"),") contains a summary (totals) of values."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{    \n    "total": 6,\n    "data": [\n        {\n            "_sumBytes1": 41572536009,\n            "_sumClientBytes2": 29606497335,\n            "_sumServerBytes3": 11966038674,\n            "_sumClientBitsPerSecond4": 3947532978,\n            "_sumServerBitsPerSecond5": 1595471823.2,\n            "_sumPacketsPerSecond6": 1678277.1666666667,\n            "_sumFlowsPerSecond7": 29062.8,\n            "total": 5,\n            "protocolName": "Total",\n            "_isTotalRow": true\n        },\n        {\n            "protocolName": 17,\n            "sumClientBytes": 27719053914,\n            "sumServerBytes": 201911191,\n            "sumClientPackets": 73654716,\n            "sumServerPackets": 742475,\n            "sumFlows": 789663,\n            "_sumBytes1": 27920965105,\n            "_sumClientBitsPerSecond4": 3695873855.2,\n            "_sumServerBitsPerSecond5": 26921492.133333333,\n            "_sumPacketsPerSecond6": 1239953.1833333333,\n            "_sumFlowsPerSecond7": 13161.05\n        },\n        {\n            "protocolName": 6,\n            "sumClientBytes": 1886667955,\n            "sumServerBytes": 11552918926,\n            "sumClientPackets": 16300918,\n            "sumServerPackets": 9267241,\n            "sumFlows": 888874,\n            "_sumBytes1": 13439586881,\n            "_sumClientBitsPerSecond4": 251555727.33333334,\n            "_sumServerBitsPerSecond5": 1540389190.1333334,\n            "_sumPacketsPerSecond6": 426135.98333333334,\n            "_sumFlowsPerSecond7": 14814.566666666668\n        },\n        {\n            "protocolName": 1,\n            "sumClientBytes": 775466,\n            "sumServerBytes": 210788181,\n            "sumClientPackets": 13425,\n            "sumServerPackets": 708019,\n            "sumFlows": 63973,\n            "_sumBytes1": 211563647,\n            "_sumClientBitsPerSecond4": 103395.46666666666,\n            "_sumServerBitsPerSecond5": 28105090.8,\n            "_sumPacketsPerSecond6": 12024.066666666668,\n            "_sumFlowsPerSecond7": 1066.2166666666667\n        },\n        {\n            "protocolName": 2,\n            "sumClientBytes": 0,\n            "sumServerBytes": 227536,\n            "sumClientPackets": 0,\n            "sumServerPackets": 6318,\n            "sumFlows": 491,\n            "_sumBytes1": 227536,\n            "_sumClientBitsPerSecond4": 0.0,\n            "_sumServerBitsPerSecond5": 30338.133333333335,\n            "_sumPacketsPerSecond6": 105.3,\n            "_sumFlowsPerSecond7": 8.183333333333334\n        },\n        {\n            "protocolName": 58,\n            "sumClientBytes": 0,\n            "sumServerBytes": 192840,\n            "sumClientPackets": 0,\n            "sumServerPackets": 3518,\n            "sumFlows": 767,\n            "_sumBytes1": 192840,\n            "_sumClientBitsPerSecond4": 0.0,\n            "_sumServerBitsPerSecond5": 25712.0,\n            "_sumPacketsPerSecond6": 58.63333333333333,\n            "_sumFlowsPerSecond7": 12.783333333333333\n        }\n    ]\n}\n')),(0,l.kt)("h2",{id:"example-7-real-data-from-the-network"},"Example 7 (real data from the network)"),(0,l.kt)("h3",{id:"scenario-5"},"Scenario"),(0,l.kt)("p",null,"Show the average amount of network traffic in bytes for each country in 3 hour time frames."),(0,l.kt)("h3",{id:"nql-query-4"},"NQL Query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'src stream ="netflowByCountryAggr" \n| set sumClientBytesAndServerBytes = add(clientBytes, serverBytes) \n| timeAggr dcCountry0=dc(country),avgSumClientBytesAndServerBytes=avg(sumClientBytesAndServerBytes),countries=join(country),   mintimestamp=min(timestamp),maxtimestamp=max(timestamp) on timestamp interval="3h" \n| set timestampStr=tsToStr(_bucket),mintimestampStr=tsToStr(mintimestamp),maxtimestampStr=tsToStr(maxtimestamp)\n| project -dcCountry0, -mintimestamp, -maxtimestamp, -_bucket `\n\n')),(0,l.kt)("h3",{id:"description-7"},"Description"),(0,l.kt)("p",null,"Below is a step-by-step explanation of NQL Query."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Select the data from the stream ",(0,l.kt)("inlineCode",{parentName:"li"},"netflowByCountryAggr")," and calculate the sum of ",(0,l.kt)("inlineCode",{parentName:"li"},"clientBytes + serverBytes"))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},'src stream ="netflowByCountryAggr" | set sumClientBytesAndServerBytes = add(clientBytes, serverBytes) ')),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "total": 2268,\n    "data": [\n        {\n            "_stream": "netflowByCountryAggr",\n            "timestamp": 1677196800000,\n            "country": "DE",\n            "tenantId": 1284495119,\n            "direction": 0,\n            "activeTime": 439550000,\n            "clientBytes": 382021135,\n            "serverBytes": 379897485,\n            "clientPackets": 1487888,\n            "serverPackets": 1479586,\n            "flows": 35164,\n            "sessions": 8791,\n            "sumClientBytesAndServerBytes": 761918620\n        },\n        {\n            "_stream": "netflowByCountryAggr",\n            "timestamp": 1677196800000,\n            "country": "SE",\n            "tenantId": 1284495119,\n            "direction": 0,\n            "activeTime": 732700000,\n            "clientBytes": 640053594,\n            "serverBytes": 638382685,\n            "clientPackets": 2492900,\n            "serverPackets": 2486417,\n            "flows": 58614,\n            "sessions": 14654,\n            "sumClientBytesAndServerBytes": 1278436279\n        },\n        {\n            "_stream": "netflowByCountryAggr",\n            "timestamp": 1677196800000,\n            "country": "DK",\n            "tenantId": 1284495119,\n            "direction": 0,\n            "activeTime": 88827750000,\n            "clientBytes": 77620570054,\n            "serverBytes": 77625811592,\n            "clientPackets": 302319389,\n            "serverPackets": 302339738,\n            "flows": 7106172,\n            "sessions": 1776555,\n            "sumClientBytesAndServerBytes": 155246381646\n        },\n       ...\n    ]\n}\n        \n')),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Calculate the average value over a 3-hour interval and save it to the ",(0,l.kt)("inlineCode",{parentName:"li"},"avgSumClientBytesAndServerBytes")," variable.")),(0,l.kt)("p",null,"In addition, we combine data from the country field, so as to show a list of countries in a given time interval (variable ",(0,l.kt)("inlineCode",{parentName:"p"},"countries"),") and the beginning and end of a given time interval (variables ",(0,l.kt)("inlineCode",{parentName:"p"},"mintimestamp, maxtimestamp"),")."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'| timeAggr dcCountry0=dc(country),\n    avgSumClientBytesAndServerBytes=avg(sumClientBytesAndServerBytes),\n    sum1 = sum(sumClientBytesAndServerBytes),\n    countries=join(country),    \n    mintimestamp=min(timestamp),\n    maxtimestamp=max(timestamp) \n    on timestamp interval="3h" \n')),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{   \n    "data": [\n        {\n            "dcCountry0": 4,\n            "avgSumClientBytesAndServerBytes": 78643487893.42223,\n            "countries": "DE,SE,DK,US,DE,SE,DK,US,DE,SE,DK,...",\n            "mintimestamp": 1677196800000,\n            "maxtimestamp": 1677207540000,\n            "_bucket": 1677196800000\n        },\n        {\n            "dcCountry0": 4,\n            "avgSumClientBytesAndServerBytes": 78643537084.8361,\n            "countries": "DE,SE,DK,US,DE,SE,DK,US,DE,SE,DK,...",\n            "mintimestamp": 1677207600000,\n            "maxtimestamp": 1677218340000,\n            "_bucket": 1677207600000\n        },\n        {\n            "dcCountry0": 4,\n            "avgSumClientBytesAndServerBytes": 78643425062.48611,\n            "countries": "DE,SE,DK,US,DE,SE,DK,US,DE,SE,DK,...",\n            "mintimestamp": 1677218400000,\n            "maxtimestamp": 1677229140000,\n            "_bucket": 1677218400000\n        },\n        {\n            "dcCountry0": 4,\n            "avgSumClientBytesAndServerBytes": 78643393605.52942,\n            "countries": "DE,SE,DK,US,DE,SE,DK,US,DE,SE,DK,...",\n            "mintimestamp": 1677229200000,\n            "maxtimestamp": 1677231180000,\n            "_bucket": 1677229200000\n        }\n    ]\n}\n')),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Convert variables containing a ",(0,l.kt)("inlineCode",{parentName:"li"},"timestamp")," value to a readable text value.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"| set timestampStr=tsToStr(_bucket),\n    mintimestampStr=tsToStr(mintimestamp),\n    maxtimestampStr=tsToStr(maxtimestamp)\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{    \n    "total": 4,\n    "data": [\n        {\n            "dcCountry0": 4,\n            "avgSumClientBytesAndServerBytes": 78643487893.42223,\n            "countries": "DE,SE,DK,US,DE,SE,DK,US,DE,SE,DK,...",\n            "mintimestamp": 1677196800000,\n            "maxtimestamp": 1677207540000,\n            "_bucket": 1677196800000,\n            "timestampStr": "2023-02-24 00:00:00.000",\n            "mintimestampStr": "2023-02-24 00:00:00.000",\n            "maxtimestampStr": "2023-02-24 02:59:00.000"\n        },\n        {\n            "dcCountry0": 4,\n            "avgSumClientBytesAndServerBytes": 78643537084.8361,\n            "countries": "DE,SE,DK,US,DE,SE,DK,US,DE,SE,DK,US,...",\n            "mintimestamp": 1677207600000,\n            "maxtimestamp": 1677218340000,\n            "_bucket": 1677207600000,\n            "timestampStr": "2023-02-24 03:00:00.000",\n            "mintimestampStr": "2023-02-24 03:00:00.000",\n            "maxtimestampStr": "2023-02-24 05:59:00.000"\n        },\n        {\n            "dcCountry0": 4,\n            "avgSumClientBytesAndServerBytes": 78643425062.48611,\n            "countries": "DE,SE,DK,US,DE,SE,DK,US,DE,SE,DK,US,...",\n            "mintimestamp": 1677218400000,\n            "maxtimestamp": 1677229140000,\n            "_bucket": 1677218400000,\n            "timestampStr": "2023-02-24 06:00:00.000",\n            "mintimestampStr": "2023-02-24 06:00:00.000",\n            "maxtimestampStr": "2023-02-24 08:59:00.000"\n        },\n        {\n            "dcCountry0": 4,\n            "avgSumClientBytesAndServerBytes": 78643404454.77777,\n            "countries": "DE,SE,DK,US,DE,SE,DK,US,DE,SE,DK,US,...",\n            "mintimestamp": 1677229200000,\n            "maxtimestamp": 1677231300000,\n            "_bucket": 1677229200000,\n            "timestampStr": "2023-02-24 09:00:00.000",\n            "mintimestampStr": "2023-02-24 09:00:00.000",\n            "maxtimestampStr": "2023-02-24 09:35:00.000"\n        }\n    ]\n}\n')),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"Remove from the result the fields do not want to display.")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"| project -dcCountry0, -mintimestamp, -maxtimestamp, -_bucket")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{   \n    "total": 4,\n    "data": [\n        {\n            "avgSumClientBytesAndServerBytes": 78643487893.42223,\n            "countries": "DE,SE,DK,US,DE,SE,DK,US,DE,SE,DK,US,DE,SE,...",\n            "timestampStr": "2023-02-24 00:00:00.000",\n            "mintimestampStr": "2023-02-24 00:00:00.000",\n            "maxtimestampStr": "2023-02-24 02:59:00.000"\n        },\n        {\n            "avgSumClientBytesAndServerBytes": 78643537084.8361,\n            "countries": "DE,SE,DK,US,DE,SE,DK,US,DE,SE,DK,US,DE,SE,...",\n            "timestampStr": "2023-02-24 03:00:00.000",\n            "mintimestampStr": "2023-02-24 03:00:00.000",\n            "maxtimestampStr": "2023-02-24 05:59:00.000"\n        },\n        {\n            "avgSumClientBytesAndServerBytes": 78643425062.48611,\n            "countries": "DE,SE,DK,US,DE,SE,DK,US,DE,SE,DK,US,DE,SE,...",\n            "timestampStr": "2023-02-24 06:00:00.000",\n            "mintimestampStr": "2023-02-24 06:00:00.000",\n            "maxtimestampStr": "2023-02-24 08:59:00.000"\n        },\n        {\n            "avgSumClientBytesAndServerBytes": 78643408233.22368,\n            "countries": "DE,SE,DK,US,DE,SE,DK,US,DE,SE,DK,US,DE,SE,...",\n            "timestampStr": "2023-02-24 09:00:00.000",\n            "mintimestampStr": "2023-02-24 09:00:00.000",\n            "maxtimestampStr": "2023-02-24 09:37:00.000"\n        }\n    ]\n}\n')),(0,l.kt)("h2",{id:"example-8-real-data-from-the-network"},"Example 8 (real data from the network)"),(0,l.kt)("h3",{id:"scenario-6"},"Scenario"),(0,l.kt)("p",null,"Threats Trajectory for most suspicious IPs. "),(0,l.kt)("h3",{id:"nql-query-5"},"NQL Query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'src stream="alerts" \n | valInColl(clientIp, "top10ClientIpLast15Minute_Alerts", "clientIp") \n | splitAggr countAlertName0=count(alertName) \n             (timeAggr on timestamp interval="1m" dir="desc" bucketAlias="srcEventTimestamp"), \n             (aggr by clientIp as clientIp unwind=true maxBuckets=20) unwind=true \n | sort countAlertName0 desc \n | limit 480\n\n')),(0,l.kt)("h3",{id:"description-8"},"Description"),(0,l.kt)("p",null,"Below is a step-by-step explanation of NQL Query."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Select data from the stream ",(0,l.kt)("inlineCode",{parentName:"li"},"alerts")," and take only those objects which have an entry in ",(0,l.kt)("inlineCode",{parentName:"li"},"top10ClientIpLast15Minute_Alerts")," collector for client Ip value.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'src stream="alerts" \n | valInColl(clientIp, "top10ClientIpLast15Minute_Alerts", "clientIp") \n')),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 217,\n    "data": [\n        {\n            "id": "61c43b97-0e06e7a1-3e17bce1",\n            "timestamp": 1679616180000,\n            "alertName": "Brute Force Attack",\n            "alertSeverity": "Medium",\n            "alertRuleType": "Security",\n            "alertTags": [\n                "60143f92-3f2b5b74-c234033d",\n                "60143f92-3f2b5b74-c2340327"\n            ],\n            "alertRuleId": "Credential Access_015",\n            "alertFlagThresholdLevel": "Critical",\n            "alertSeen": false,\n            "alertFalsePositive": false,\n            "alertComment": null,\n            "alertMitreTactic": "Credential Access",\n            "alertMitreTechnique": "Brute Force",\n            "alertMitreId": "T1110",\n            "alertMitreSubtechnique": null,\n            "alertDefId": "61a869fa-825ce206-718d6533",\n            "alertAckUser": null,\n            "alertAckLastUpdate": null,\n            "alertFalsePositiveUser": null,\n            "alertFalsePositiveLastUpdate": null,\n            "alertCommentUser": null,\n            "alertCommentLastUpdate": null,\n            "_firstServerCountry": null,\n            "serverPort": 443,\n            "_serverIp": "172.16.60.31",\n            "_firstServerPort": 443,\n            "_firstClientCountry": null,\n            "_firstClientIp": "172.16.70.243",\n            "_firstClientFunction": [\n                "Workstations"\n            ],\n            "_firstServerFunction": [\n                "Workstations"\n            ],\n            "clientIp": "172.16.70.243",\n            "serverIp": "172.16.60.31",\n            "_clientIp": "172.16.70.243",\n            "_countSessions": 949,\n            "_firstServerIp": "172.16.60.31",\n            "_firstClientAsn": null,\n            "_firstServerAsn": null\n        },\n        {\n            "id": "61c43b97-0e06e7a1-3e17bce3",\n            "timestamp": 1679616180000,\n            "alertName": "Brute Force Attack 2",\n            "alertSeverity": "Medium",\n            "alertRuleType": "Security",\n            "alertTags": [\n                "60143f92-3f2b5b74-c234033d",\n                "60143f92-3f2b5b74-c2340327"\n            ],\n            "alertRuleId": "Credential Access_019",\n            "alertFlagThresholdLevel": "Critical",\n            "alertSeen": false,\n            "alertFalsePositive": false,\n            "alertComment": null,\n            "alertMitreTactic": "Credential Access",\n            "alertMitreTechnique": "Brute Force",\n            "alertMitreId": "T1110",\n            "alertMitreSubtechnique": null,\n            "alertDefId": "61a739be-037e4715-be7c2dcf",\n            "alertAckUser": null,\n            "alertAckLastUpdate": null,\n            "alertFalsePositiveUser": null,\n            "alertFalsePositiveLastUpdate": null,\n            "alertCommentUser": null,\n            "alertCommentLastUpdate": null,\n            "_firstServerCountry": null,\n            "serverPort": 443,\n            "_serverIp": "172.16.60.31",\n            "_firstServerPort": 443,\n            "_firstClientCountry": null,\n            "_firstClientIp": "172.16.70.243",\n            "_firstClientFunction": [\n                "Workstations"\n            ],\n            "_firstServerFunction": [\n                "Workstations"\n            ],\n            "clientIp": "172.16.70.243",\n            "serverIp": "172.16.60.31",\n            "_clientIp": "172.16.70.243",\n            "_countSessions": 949,\n            "_firstServerIp": "172.16.60.31",\n            "_firstClientAsn": null,\n            "_firstServerAsn": null\n        },\n        ...\n    ]\n}\n')),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Calculate number of alerts in groups by time bucket ",(0,l.kt)("inlineCode",{parentName:"li"},"1m")," (one month) and ",(0,l.kt)("inlineCode",{parentName:"li"},"clientIp")," value.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' | splitAggr countAlertName0=count(alertName) \n           (timeAggr on timestamp interval="1m" dir="desc" bucketAlias="srcEventTimestamp"), \n           (aggr by clientIp as clientIp unwind=true maxBuckets=20) unwind=true \n')),(0,l.kt)("p",null,"2.1. Calculate number of alerts in ",(0,l.kt)("inlineCode",{parentName:"p"},"1m")," time range bukcets."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},' | splitAggr countAlertName0=count(alertName) \n           (timeAggr on timestamp interval="1m" dir="desc" bucketAlias="srcEventTimestamp")           \n')),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 129,\n    "data": [\n        {\n            "countAlertName0": 2,\n            "srcEventTimestamp": 1679644920000\n        },\n        {\n            "countAlertName0": 2,\n            "srcEventTimestamp": 1679644860000\n        },\n        ...\n    ]\n}\n')),(0,l.kt)("p",null,"2.2. Calculate number of alerts in ",(0,l.kt)("inlineCode",{parentName:"p"},"clientIp")," groups."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," | splitAggr countAlertName0=count(alertName)            \n           (aggr by clientIp as clientIp unwind=true maxBuckets=20) unwind=true \n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 3,\n    "data": [\n        {\n            "countAlertName0": 166,\n            "clientIp": "172.16.70.243"\n        },\n        {\n            "countAlertName0": 35,\n            "clientIp": "172.16.42.30"\n        },\n        {\n            "countAlertName0": 28,\n            "clientIp": "110.78.211.84"\n        }\n    ]\n}\n')),(0,l.kt)("p",null,"Result for ",(0,l.kt)("inlineCode",{parentName:"p"},"splitAggr"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 135,\n    "data": [\n        {\n            "countAlertName0": 2,\n            "clientIp": "172.16.70.243",\n            "srcEventTimestamp": 1679644620000\n        },\n        {\n            "countAlertName0": 2,\n            "clientIp": "172.16.70.243",\n            "srcEventTimestamp": 1679644500000\n        },\n        {\n            "countAlertName0": 2,\n            "clientIp": "172.16.70.243",\n            "srcEventTimestamp": 1679644380000\n        },\n        ...\n    ]\n}       \n')),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Sort objects by number of alerts and show first 480 objects")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"| sort countAlertName0 desc \n| limit 480\n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 138,\n    "data": [\n        {\n            "countAlertName0": 2,\n            "clientIp": "172.16.70.243",\n            "srcEventTimestamp": 1679644680000\n        },\n        {\n            "countAlertName0": 2,\n            "clientIp": "172.16.70.243",\n            "srcEventTimestamp": 1679644620000\n        },\n        {\n            "countAlertName0": 2,\n            "clientIp": "172.16.70.243",\n            "srcEventTimestamp": 1679644500000\n        },\n        ...\n    ]\n}\n')),(0,l.kt)("h2",{id:"example-9-real-data-from-the-network"},"Example 9 (real data from the network)"),(0,l.kt)("h3",{id:"scenario-7"},"Scenario"),(0,l.kt)("p",null,"A rule detects a brute force/dictionary attack on specific applications (FTP, HTTPS, HTTP, IMAP, RDP, SSH, IMAP3, LDAP, LDAPS, MYSQL, POP3, POP3S, POSTGRESQL, SMTP, TELNET, TFTP, ASTERISK, VNC, SNMP, MSSQL, SMB, ICQ, NNTP, PCANYWHERE, ORACLELISTENER, SVN, XMPP, SIP, RADMIN2, REXEC, RLOGIN, WS - Management and PowerShell remoting via HTTP, WS - Management and PowerShell remoting via HTTPS, RPCAP, NetBIOS, Kerberos) from a single IP address to the same host. "),(0,l.kt)("h3",{id:"nql-query-6"},"NQL Query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'src stream="netflow" \n| in(serverPort,[21,22,23,25,69,80,88,110,119,139,143,161,220,389,443,445,512,513,636,995,1433,1521,2002,3306,3389,3690,4000,4899,5038,5060,5222,5432,5631,5900,5985,5986,6667]) \n| aggr _countSessions=count(timestamp), \n       _clientIp=first(clientIp), \n       _firstClientCountry=first(clientCountry), \n       _firstClientFunction=first(clientFunction), \n       _serverIp=first(serverIp), \n       _firstServerCountry=first(serverCountry), \n       _firstServerFunction=first(serverFunction), \n       _firstClientIp=first(clientIp),\n       _firstServerIp=first(serverIp), \n       _firstServerPort=first(serverPort) by clientIp as clientIp, serverIp as serverIp, serverPort as serverPort unwind=true \n| sort _countSessions desc \n| limit 100 \n| set _firstClientAsn=lookup("ip-as","name", {"ip": _clientIp} ), _firstServerAsn=lookup("ip-as","name", {"ip": _serverIp} ) \n| limit 1000\n')),(0,l.kt)("h3",{id:"description-9"},"Description"),(0,l.kt)("p",null,"Below is a step-by-step explanation of NQL Query."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},'Select objects from the "netflow" stream for which the value of the ',(0,l.kt)("inlineCode",{parentName:"li"},"serverPort ")," field is on the list: ",(0,l.kt)("inlineCode",{parentName:"li"},"21,22,23,25,69,80,88,110,119,139,143,161,220,389,443,445,512,513,636,995,1433,1521,2002,3306,3389,3690,4000,4899,5038,5060,5222,5432,5631,5900,5985,5986,6667"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'src stream="netflow" \n| in(serverPort,[21,22,23,25,69,80,88,110,119,139,143,161,220,389,443,445,512,513,636,995,1433,1521,2002,3306,3389,3690,4000,4899,5038,5060,5222,5432,5631,5900,5985,5986,6667]) \n')),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 6935,\n    "data": [\n        {\n            "_stream": "netflow",\n            "timestamp": 1677603840000,\n            "sessionId": 1,\n            "clientIp": "172.16.60.107",\n            "serverIp": "172.105.8.229",\n            "protocol": 6,\n            "clientPort": 44276,\n            "serverPort": 443,\n            "application": 443,\n            "exporterIps": [\n                "172.16.100.1"\n            ],\n            "interfaces": [\n                "172.16.100.1[3]",\n                "172.16.100.1[5]"\n            ],\n            "clientFunction": [\n                "Workstations"\n            ],\n            "serverFunction": [],\n            "clientLocation": [],\n            "serverLocation": [],\n            "clientRole": [],\n            "serverRole": [],\n            "clientTcpFlags": 0,\n            "serverTcpFlags": 0,\n            "tosNumbers": [],\n            "mpls": [],\n            "asNumbers": [],\n            "icmpType": [],\n            "clientCountry": null,\n            "serverCountry": null,\n            "clientAsNumber": null,\n            "serverAsNumber": null,\n            "activeTime": 1368,\n            "firstTimestamp": 1677603559044,\n            "lastTimestamp": 1677603560436,\n            "clientBytes": 1622,\n            "serverBytes": 25892,\n            "clientPackets": 15,\n            "serverPackets": 25,\n            "flows": 4\n        },\n        {\n            "_stream": "netflow",\n            "timestamp": 1677603840000,\n            "sessionId": 3,\n            "clientIp": "172.16.20.141",\n            "serverIp": "52.97.229.210",\n            "protocol": 6,\n            "clientPort": 60297,\n            "serverPort": 443,\n            "application": 443,\n            "exporterIps": [\n                "172.16.100.1"\n            ],\n            "interfaces": [\n                "172.16.100.1[4]",\n                "172.16.100.1[5]"\n            ],\n            "clientFunction": [\n                "Workstations"\n            ],\n            "serverFunction": [],\n            "clientLocation": [],\n            "serverLocation": [],\n            "clientRole": [],\n            "serverRole": [],\n            "clientTcpFlags": 0,\n            "serverTcpFlags": 0,\n            "tosNumbers": [],\n            "mpls": [],\n            "asNumbers": [],\n            "icmpType": [],\n            "clientCountry": null,\n            "serverCountry": null,\n            "clientAsNumber": null,\n            "serverAsNumber": null,\n            "activeTime": 43948,\n            "firstTimestamp": 1677603524348,\n            "lastTimestamp": 1677603568296,\n            "clientBytes": 40,\n            "serverBytes": 1273,\n            "clientPackets": 1,\n            "serverPackets": 3,\n            "flows": 2\n        },\n        ...\n    ]\n}\n')),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Select the first values of the fields ",(0,l.kt)("inlineCode",{parentName:"li"}," _clientIp, _firstClientCountry, _firstClientFunction, _serverIp, _firstServerCountry, _firstServerFunction, _firstClientIp, _firstServerIp, _firstServerPort")," for the given groups ",(0,l.kt)("inlineCode",{parentName:"li"},"clientIp, serverIp")," i ",(0,l.kt)("inlineCode",{parentName:"li"},"serverPort"),". And the calculation of the number of objects in these groups (",(0,l.kt)("inlineCode",{parentName:"li"},"_countSessions"),").")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"| aggr _countSessions=count(timestamp), \n       _clientIp=first(clientIp), \n       _firstClientCountry=first(clientCountry), \n       _firstClientFunction=first(clientFunction), \n       _serverIp=first(serverIp), \n       _firstServerCountry=first(serverCountry), \n       _firstServerFunction=first(serverFunction), \n       _firstClientIp=first(clientIp),\n       _firstServerIp=first(serverIp), \n       _firstServerPort=first(serverPort) by clientIp as clientIp, serverIp as serverIp, serverPort as serverPort unwind=true \n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 1153,\n    "data": [\n        {\n            "_firstServerCountry": null,\n            "serverPort": 443,\n            "_serverIp": "172.105.8.229",\n            "_firstServerPort": 443,\n            "_firstClientCountry": null,\n            "_firstClientIp": "172.16.60.107",\n            "_firstClientFunction": [\n                "Workstations"\n            ],\n            "_firstServerFunction": [],\n            "clientIp": "172.16.60.107",\n            "serverIp": "172.105.8.229",\n            "_clientIp": "172.16.60.107",\n            "_countSessions": 4,\n            "_firstServerIp": "172.105.8.229"\n        },\n        {\n            "_firstServerCountry": null,\n            "serverPort": 443,\n            "_serverIp": "52.97.229.210",\n            "_firstServerPort": 443,\n            "_firstClientCountry": null,\n            "_firstClientIp": "172.16.20.141",\n            "_firstClientFunction": [\n                "Workstations"\n            ],\n            "_firstServerFunction": [],\n            "clientIp": "172.16.20.141",\n            "serverIp": "52.97.229.210",\n            "_clientIp": "172.16.20.141",\n            "_countSessions": 19,\n            "_firstServerIp": "52.97.229.210"\n        },\n        ...\n    ]\n}\n')),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Sort the results by the",(0,l.kt)("inlineCode",{parentName:"li"}," _countSessions")," field in descending order and select the first 100 objects. ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"| sort _countSessions desc \n| limit 100 \n")),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 100,\n    "data": [\n        {\n            "_firstServerCountry": null,\n            "serverPort": 443,\n            "_serverIp": "209.206.5.62",\n            "_firstServerPort": 443,\n            "_firstClientCountry": null,\n            "_firstClientIp": "172.16.10.76",\n            "_firstClientFunction": [\n                "Workstations"\n            ],\n            "_firstServerFunction": [],\n            "clientIp": "172.16.10.76",\n            "serverIp": "209.206.5.62",\n            "_clientIp": "172.16.10.76",\n            "_countSessions": 223,\n            "_firstServerIp": "209.206.5.62"\n        },\n        {\n            "_firstServerCountry": null,\n            "serverPort": 443,\n            "_serverIp": "52.113.194.132",\n            "_firstServerPort": 443,\n            "_firstClientCountry": null,\n            "_firstClientIp": "172.16.43.38",\n            "_firstClientFunction": [\n                "Workstations"\n            ],\n            "_firstServerFunction": [],\n            "clientIp": "172.16.43.38",\n            "serverIp": "52.113.194.132",\n            "_clientIp": "172.16.43.38",\n            "_countSessions": 146,\n            "_firstServerIp": "52.113.194.132"\n        },\n        ...\n    ]\n}\n')),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"Add fields ",(0,l.kt)("inlineCode",{parentName:"li"},"_firstClientAsn")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"_firstServerAsn")," whose values are selected from files (lookup's) ",(0,l.kt)("inlineCode",{parentName:"li"},"ip-as")," i ",(0,l.kt)("inlineCode",{parentName:"li"},"ip-as"),' from field "name" for conditions: ',(0,l.kt)("inlineCode",{parentName:"li"},"ip=_clientIp")," oraz ",(0,l.kt)("inlineCode",{parentName:"li"},"ip=_serverIp"),". Get the first 1000 objects.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'| set _firstClientAsn=lookup("ip-as","name", {"ip": _clientIp} ), _firstServerAsn=lookup("ip-as","name", {"ip": _serverIp} ) \n| limit 1000\n')),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "status": {\n        "state": "FINISHED"\n    },\n    "total": 100,\n    "data": [\n        {\n            "_firstServerCountry": null,\n            "serverPort": 443,\n            "_serverIp": "209.206.5.62",\n            "_firstServerPort": 443,\n            "_firstClientCountry": null,\n            "_firstClientIp": "172.16.10.76",\n            "_firstClientFunction": [\n                "Workstations"\n            ],\n            "_firstServerFunction": [],\n            "clientIp": "172.16.10.76",\n            "serverIp": "209.206.5.62",\n            "_clientIp": "172.16.10.76",\n            "_countSessions": 223,\n            "_firstServerIp": "209.206.5.62",\n            "_firstClientAsn": 23456,\n            "_firstServerAsn": 65535\n        },\n        {\n            "_firstServerCountry": null,\n            "serverPort": 443,\n            "_serverIp": "52.113.194.132",\n            "_firstServerPort": 443,\n            "_firstClientCountry": null,\n            "_firstClientIp": "172.16.43.38",\n            "_firstClientFunction": [\n                "Workstations"\n            ],\n            "_firstServerFunction": [],\n            "clientIp": "172.16.43.38",\n            "serverIp": "52.113.194.132",\n            "_clientIp": "172.16.43.38",\n            "_countSessions": 146,\n            "_firstServerIp": "52.113.194.132",\n            "_firstClientAsn": 131072,\n            "_firstServerAsn": 64512\n        },\n')))}d.isMDXComponent=!0}}]);