"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[12758],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>g});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var o=a.createContext({}),u=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},m=function(t){var e=u(t.components);return a.createElement(o.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},p=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,o=t.parentName,m=s(t,["components","mdxType","originalType","parentName"]),p=u(n),g=r,k=p["".concat(o,".").concat(g)]||p[g]||d[g]||l;return n?a.createElement(k,i(i({ref:e},m),{},{components:n})):a.createElement(k,i({ref:e},m))}));function g(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=p;var s={};for(var o in e)hasOwnProperty.call(e,o)&&(s[o]=e[o]);s.originalType=t,s.mdxType="string"==typeof t?t:r,i[1]=s;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},85917:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>m,contentTitle:()=>o,default:()=>g,frontMatter:()=>s,metadata:()=>u,toc:()=>d});var a=n(87462),r=n(63366),l=(n(67294),n(3905)),i=["components"],s={},o="NQL CheatSheet",u={unversionedId:"NQL/nql_cheat_sheet",id:"version-2.2.3/NQL/nql_cheat_sheet",title:"NQL CheatSheet",description:"Commands",source:"@site/versioned_docs/version-2.2.3/05-NQL/01-nql_cheat_sheet.md",sourceDirName:"05-NQL",slug:"/NQL/nql_cheat_sheet",permalink:"/2.2.3/NQL/nql_cheat_sheet",draft:!1,tags:[],version:"2.2.3",lastUpdatedAt:1686667651,formattedLastUpdatedAt:"13 Jun 2023",sidebarPosition:1,frontMatter:{},sidebar:"docs",previous:{title:"Licenses",permalink:"/2.2.3/User Guide/Configuration/Licenses"},next:{title:"NQL query examples",permalink:"/2.2.3/NQL/NQL_examples"}},m={},d=[{value:"Commands",id:"commands",level:2},{value:"Common commands",id:"common-commands",level:3},{value:"Agregations",id:"agregations",level:3},{value:"Functions",id:"functions",level:2},{value:"Dates and times functions",id:"dates-and-times-functions",level:3},{value:"Mathematical functions",id:"mathematical-functions",level:3},{value:"Conditional functions",id:"conditional-functions",level:3},{value:"String fuctions",id:"string-fuctions",level:3},{value:"Aggregator (Acumulator) functions",id:"aggregator-acumulator-functions",level:3},{value:"Network object functions",id:"network-object-functions",level:3},{value:"Lookup functions",id:"lookup-functions",level:3},{value:"Collection functions",id:"collection-functions",level:3},{value:"Collector functions",id:"collector-functions",level:3},{value:"Operators",id:"operators",level:3}],p={toc:d};function g(t){var e=t.components,n=(0,r.Z)(t,i);return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"nql-cheatsheet"},"NQL CheatSheet"),(0,l.kt)("h2",{id:"commands"},"Commands"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Time & Streams")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command name"),(0,l.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"source")," (",(0,l.kt)("strong",{parentName:"td"},"src"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"src stream={string} ","[startTime={timespan} endTime={timespan}]"),(0,l.kt)("td",{parentName:"tr",align:null},"Generates a collection of objects from the given source."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"dst")),(0,l.kt)("td",{parentName:"tr",align:null},"dst {collectorName}"),(0,l.kt)("td",{parentName:"tr",align:null},"Saves the result to a new collector with the given name."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts"  ',"|"," limit 1000 ","|",' dst "collector1"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"collector (coll)")),(0,l.kt)("td",{parentName:"tr",align:null},"coll {id} ","[bunchSize={liczba}]"),(0,l.kt)("td",{parentName:"tr",align:null},"Feeds the NQL with objects from a collector with the given ID."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|",' set fullName=concat("alertName", " ", "alertSeverity") ',"|"," limit 1000 ","|",' dst "collector1"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"records")),(0,l.kt)("td",{parentName:"tr",align:null},"records {tuple0} ","[, ... {tupleN}]"),(0,l.kt)("td",{parentName:"tr",align:null},"Generates a collection of objects to be passed to the output."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"fName":"Jake","dep":"IT"},{"fName":"Jack","dep":"ADM"},{"fName":"Harry","dep":"ADM"},{"fName":"Jacob","dep":"IT"}')))),(0,l.kt)("h3",{id:"common-commands"},"Common commands"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command name"),(0,l.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"sort")),(0,l.kt)("td",{parentName:"tr",align:null},"sort {field1} ","[asc/desc]",",\u2026 {fieldN} ","[asc/desc]","] ","[limit={number}][outLimit={number}]"),(0,l.kt)("td",{parentName:"tr",align:null},"Sorts the collection of objects based on the value of a field. The sorting is performed for a maximum number of records specified in the ",(0,l.kt)("inlineCode",{parentName:"td"},"limit")," parameter."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," sort timestamp desc")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"project")),(0,l.kt)("td",{parentName:"tr",align:null},"project +{fieldName} as alias / -{fieldName},..."),(0,l.kt)("td",{parentName:"tr",align:null},"Selects the fields of an object that will be passed to the output and/or changes the field names."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," project +clientIp, +serverIp")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"limit")),(0,l.kt)("td",{parentName:"tr",align:null},"limit ","[{offset},]"," {limit}"),(0,l.kt)("td",{parentName:"tr",align:null},"Truncates the output collection to a specified number of objects. Returns the first {limit} starting from position {offset}."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"tail")),(0,l.kt)("td",{parentName:"tr",align:null},"tail {limit}"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the last ",(0,l.kt)("inlineCode",{parentName:"td"},"n")," objects from the input collection."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," sort timestamp desc ","|"," tail 2")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"set/add")),(0,l.kt)("td",{parentName:"tr",align:null},"set {field}={expression}","[, \u2026 {fieldN}={expression}]",(0,l.kt)("br",null)," / add fieldName={expression}","[, \u2026 fieldNameN={expression}]"),(0,l.kt)("td",{parentName:"tr",align:null},"Adds or creates a new field in all records. The ",(0,l.kt)("inlineCode",{parentName:"td"},"set")," command updates the value of an existing field if a field with the given name already exists, while the ",(0,l.kt)("inlineCode",{parentName:"td"},"add")," command always adds a new field."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|",' set streamNameWithClientIp = concat(_stream,"-",clientIp) ',"|"," project +_stream, +clientIp, +streamNameWithClientIp")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"top/rare")),(0,l.kt)("td",{parentName:"tr",align:null},"top {field} ","[by {field_name}, [{field_name1},\u2026]][limit={number}]"," ","[others=true/false][maxBuckets={number}]"," ",(0,l.kt)("br",null),"/ rare {field} ","[by {field_name, [field_name1, \u2026.]}][limit={number}]"," ","[others=true/false][maxBuckets={number}]"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the {limit} most frequent top/rare values of the expression."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|","  top clientIp limit=2")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"fork")),(0,l.kt)("td",{parentName:"tr",align:null},"fork ({subPipe1}), ({subPipe2}) ","[, ... ({subPipeN})]"),(0,l.kt)("td",{parentName:"tr",align:null},"Takes objects from the input collection and sends them to a parallel pipeline."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," fork (aggr clientIpCount = count(clientIpCount)), (aggr maxTimeStamp = max(timestamp))")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"subpipe")),(0,l.kt)("td",{parentName:"tr",align:null},"subpipe ({subPipe})"),(0,l.kt)("td",{parentName:"tr",align:null},"Defines a sub-pipeline that will be executed on each object of the input collection."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|",' subpipe (src stream="netflow" ',"|"," aggr clientIpCount = count(clientIpCount) ","|",' dst "collector2")')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"where")),(0,l.kt)("td",{parentName:"tr",align:null},"where {logical_filter}"),(0,l.kt)("td",{parentName:"tr",align:null},"An FA command that filters input objects with the specified logical filter."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|",' where clientIp="172.16.10.11" or serverIp="172.16.10.11"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"sleep")),(0,l.kt)("td",{parentName:"tr",align:null},"sleep {delay}"),(0,l.kt)("td",{parentName:"tr",align:null},"The command is used to delay the execution of the next command in the pipeline."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," sort clientIp desc ","|"," sleep 10 ","|"," sort clientIp")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"unwind")),(0,l.kt)("td",{parentName:"tr",align:null},"unwind {field} ","[includeEmpty=true/false]"),(0,l.kt)("td",{parentName:"tr",align:null},"The command unwinds the collection values for the {field} field. A new object is created for each value. The record remains unchanged if the {field} is not a collection."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," unwind exporterIps")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"fields")),(0,l.kt)("td",{parentName:"tr",align:null},"fields ","[maxFields={number}][maxTuples={number} ]"," ","[topCount={number} ][maxDistinctValuesPerField={number} ]"),(0,l.kt)("td",{parentName:"tr",align:null},"The command is used to display information about fields. It counts fields, unique values and collects the most common values."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," fields maxFields=10")))),(0,l.kt)("h3",{id:"agregations"},"Agregations"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command name"),(0,l.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"aggr")),(0,l.kt)("td",{parentName:"tr",align:null},"aggr {field}={aggregation_function}(...) ","[,{fieldN}={aggregation_functionN},...]","by {grouping_field}","[, {grouping_field}, ...]","] ","[unwind=true/false][maxBuckets={number}]"),(0,l.kt)("td",{parentName:"tr",align:null},"Aggregates data using an aggregation function, producing a single result for a collection of objects or its subset. Multiple aggregation functions can be used with the ",(0,l.kt)("inlineCode",{parentName:"td"},"aggr")," command on several fields, but regular functions cannot be combined."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," aggr maxTimeStamp = max(timestamp) by clientIp unwind=true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"rangeAggr")),(0,l.kt)("td",{parentName:"tr",align:null},"rangeAggr {field}={aggregation_function}({field}) ","[on {field}]","by {field}","[, {field}]",'] ranges="1-5,5-10" ',"[bucketAlias={string}][unwind=true/false]"),(0,l.kt)("td",{parentName:"tr",align:null},"Aggregates data for specified subsets defined by a range of values."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|",' rangeAggr valuesCount=count(clientBytes), maxBalance=max(clientBytes) on clientBytes by clientIp ranges="0-5000,8000-10000"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"splitAggr")),(0,l.kt)("td",{parentName:"tr",align:null},"splitAggr {field}={aggregation_function}({streamField}) ","[, ... {fieldN}={aggregation_functionN}({streamFieldN})]"," ({subAggr1}), ({subAggr2}), ","[, ... ({subAggrN})][unwind=true/false]"),(0,l.kt)("td",{parentName:"tr",align:null},"Performs multiple aggregations, where each subsequent one is performed in the context of the previous one."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," splitAggr sumBytes0=sum(clientBytes) (aggr by clientIp unwind=true),(aggr by serverIp unwind=true))")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"timeAggr")),(0,l.kt)("td",{parentName:"tr",align:null},"timeAggr {field}={aggregation_function}({field}) ","[on {field}]","by {field}","[, {field}]","] ","[interval={timespan}][dir={dir}]"," ","[maxBuckets={number}][bucketAlias={string}]"," ","[unwind=true/false]"),(0,l.kt)("td",{parentName:"tr",align:null},"An operator that aggregates data using an aggregate(accumulator) function. ",(0,l.kt)("br",null),"Returns results for specific subsets of data defined as time periods. ",(0,l.kt)("br",null),"It is primarily used to create graphs where one of the axes corresponds to time."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|",' timeAggr avgClientBytes=avg(clientBytes), cntClientBytes=count(clientBytes) on timestamp interval="1d" ',"|"," set dateTime=tsToStr(_bucket) ","|"," sort _bucket")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("h3",{id:"dates-and-times-functions"},"Dates and times functions"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"now"),"() : long"),(0,l.kt)("td",{parentName:"tr",align:null},"Creates a timestamp in GMT+00 time zone from the time of the call"),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = now() ","|"," set funResultStr=tsToStr(funResult) ","|"," project +funResult, +funResultStr ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"timestamp"),"(int yy, int mm, int dd, int hh24, int mi, int sec ","[, offset={int}]",") : long"),(0,l.kt)("td",{parentName:"tr",align:null},"Calculates the timestamp for the given values of year, month, day, hour, minute and second."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = timestamp(1995,10,13,12,15,20) ","|"," set funResultStr=tsToStr(funResult) ","|"," project +funResult, +funResultStr ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"addMonths"),"(long ts, int  n) : long"),(0,l.kt)("td",{parentName:"tr",align:null},"Adds n months to the ts timestamp."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = addMonths(now(),1) ","|"," set funResultStr=tsToStr(funResult) ","|"," project +funResult, +funResultStr ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"addYears"),"(long ts, int n)  : long"),(0,l.kt)("td",{parentName:"tr",align:null},"Adds n years to the ts timestamp."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = addYears(now(),1) ","|"," set funResultStr=tsToStr(funResult) ","|"," project +funResult, +funResultStr ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"addDays"),"(long ts, int n)  : long"),(0,l.kt)("td",{parentName:"tr",align:null},"Adds n days to the ts timestamp."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = addDays(now(),1) ","|"," set funResultStr=tsToStr(funResult) ","|"," project +funResult, +funResultStr ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"addHours"),"(long ts, int n)  : long"),(0,l.kt)("td",{parentName:"tr",align:null},"Adds n hours to the ts timestamp."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = addHours(now(),1) ","|"," set funResultStr=tsToStr(funResult) ","|"," project +funResult, +funResultStr ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"addMinutes"),"(long arg1, int arg2) : long"),(0,l.kt)("td",{parentName:"tr",align:null},"Adds n minutes to the ts timestamp."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = addMinutes(now(),1) ","|"," set funResultStr=tsToStr(funResult) ","|"," project +funResult, +funResultStr ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"addSeconds"),"(long arg1, int arg2) : long"),(0,l.kt)("td",{parentName:"tr",align:null},"Adds n seconds to the ts timestamp."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = addSeconds(now(),1) ","|"," set funResultStr=tsToStr(funResult) ","|"," project +funResult, +funResultStr ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"addMillis"),"(long arg1, int  arg2) : long"),(0,l.kt)("td",{parentName:"tr",align:null},"Adds n milliseconds to the ts timestamp."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = addMillis(now(),1000) ","|"," set funResultStr=tsToStr(funResult) ","|"," project +funResult, +funResultStr ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"getYear"),"(long arg1) : int"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the year from the given ts timestamp."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = getYear(now())  ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"getMonth"),"(long arg1) :  int"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the month from the given ts timestamp."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = getMonth(now())  ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"getDay"),"(long arg1) : int"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the number of the day of the month from the given ts timestamp."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = getDay(now())  ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"getDayOfWeek"),"(long timestamp) : int"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the number of the day of the week from the given ts timestamp."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = getDayOfWeek(now())  ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"getHour"),"(long timestamp)  : int"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the hour from the given ts timestamp."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = getHour(now())  ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"getMinute"),"(long timestamp) : int"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the minute from the given ts timestamp."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = getMinute(now())  ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"getSecond"),"(long timestamp) : int"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the second from the given ts timestamp."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = getSecond(now())  ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"tsToStr"),"(long arg ","[, format={string}][, zone={string}]",") : string"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the ts timestamp as a formatted date."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = now() ","|"," set funResultStr=tsToStr(funResult) ","|"," project +funResultStr ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"tsParse"),"(string arg ","[, format={string}][, zone={string}]",") : long"),(0,l.kt)("td",{parentName:"tr",align:null},"For the given arg (formatted date and time), returns the timestamp value."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = tsParse("2021-06-09 15:12:10", format="yyyy-MM-dd HH:mm:ss" zone="Poland")  ',"|"," set funResultStr=tsToStr(funResult) ","|"," project +funResult, +funResultStr ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"tsOffset"),"(long ts, int n)  : long"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the ts timestamp offset by n."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = tsOffset(now(),10) ","|"," set funResultStr=tsToStr(funResult) ","|"," project +funResult, +funResultStr ","|"," limit 1")))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"mathematical-functions"},"Mathematical functions"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"sum"),"(number n1, number n2 ","[,nN][, type={string}]",": number"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the result of the sum: n1, n2 + ... + nN"),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|"," set funResult = sum(1,2,3,4) ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"add"),"(number n1, number n2 ","[, type={string}]","): number"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the result of the sum: n1 + n2"),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|"," set funResult = add(1,2) ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"sub"),"(number n1, number n2 ","[, type={string}]","): number"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the result of the subtraction: n1 -  n2"),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|"," set funResult = sub(1,2) ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"mul"),"(number n1, number n2 ","[, type={string}]","): number"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the result of the multiplication: n1 * n2"),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|"," set funResult = mul(1,2) ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"div"),"(number n1, number n2) : double"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the result of the division: n1 / n2"),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|"," set funResult = div(1,2) ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"floorDiv"),"(number n1, number n2): long"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the result of the division: n1 / n2  without remainders."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|"," set funResult = floorDiv(1,2) ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"mod"),"(number n1, number n2): long"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the result of the remainder of the division: n1 / n2."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|"," set funResult = mod(1,2) ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"abs"),"(number n) : number"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the base value of n."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|"," set funResult = abs(-2) ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"pow"),"(number n1, n2):  double"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the result of the multiplication: n1 * n2."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|"," set funResult = pow(2,2) ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"sqrt"),"(number n) :  double"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the square root of the number n."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|"," set funResult = sqrt(4) ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"sqr"),"(number n) : double"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the square of the number n."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|"," set funResult = sqr(4) ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"floor"),"(number n) : long"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the number n rounded down to the nearest integer."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|"," set funResult = floor(10.23) ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"ceil"),"(number n) : long"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the number n rounded up to the nearest integer."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|"," set funResult = ceil(10.23) ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"sign"),"(number n) : int"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns -1 for ",(0,l.kt)("inlineCode",{parentName:"td"},"n<0"),", 0 for ",(0,l.kt)("inlineCode",{parentName:"td"},"n=0")," and 1  for ",(0,l.kt)("inlineCode",{parentName:"td"},"n>0"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|"," set funResult = sign(-123) ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"rand"),"() : double"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns a random number in the range (0,1)."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|"," set funResult = rand() ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"randInt"),"(int from, int  to) : int"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns a random integer in the given range (from, to)."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|"," set funResult = randInt(10,100) ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"bitAnd"),"(number n1,  number n2 ","[, number nN]","): number :"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the result of the ",(0,l.kt)("inlineCode",{parentName:"td"},"AND")," bit operation on the arguments"),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|"," set funResult = bitAnd(255,3) ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"bitOr"),"(number n1,  number n2 ","[, number nN]","): number :"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the result of the ",(0,l.kt)("inlineCode",{parentName:"td"},"OR")," bit operation on the arguments"),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|"," set funResult = bitOr(1,2) ","|"," project +funResult ","|"," limit 1")))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"conditional-functions"},"Conditional functions"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"if"),"(string condition : object result1, object result2)"),(0,l.kt)("td",{parentName:"tr",align:null},"If ",(0,l.kt)("inlineCode",{parentName:"td"},"condition")," is true, it returns ",(0,l.kt)("inlineCode",{parentName:"td"},"result1"),", otherwise returns ",(0,l.kt)("inlineCode",{parentName:"td"},"result2"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"fName":"Jake","dep":"IT"},{"fName":"Jack","dep":"ADM"},{"fName":"Harry","dep":"ADM"} ',"|",'  set funResult = if( fName="Jake":"This is Jake","This is not Jake") ',"|"," project +fName, +funResult ","|"," limit 10")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"switch"),'(field_name,  "1": object result1, "2": object result2, object default_result)'),(0,l.kt)("td",{parentName:"tr",align:null},"If the value of the ",(0,l.kt)("inlineCode",{parentName:"td"},"field_name")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"1"),", the function returns the ",(0,l.kt)("inlineCode",{parentName:"td"},"result1"),". If ",(0,l.kt)("inlineCode",{parentName:"td"},"2"),", it returns the ",(0,l.kt)("inlineCode",{parentName:"td"},"result2"),". If none of the given values, the function returns the ",(0,l.kt)("inlineCode",{parentName:"td"},"defaultResult"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"fName":"Jake","dep":"IT"},{"fName":"Jack","dep":"ADM"},{"fName":"Harry","dep":"ADM"} ',"|",'  set funResult = switch( fName, "Jake":"This is Jake", "Harry":"This is Harry","This is not Jake") ',"|"," project +fName, +funResult ","|"," limit 10")))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"string-fuctions"},"String fuctions"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"concat"),"(string arg1, string arg2 ","[,string argN][,delimiter={string} distinct=true/false limit={int}]",") : string"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the concatenated strings ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1, arg2, ..., argN")),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = concat("This","-","is","-","Jake") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"substring"),"(string arg, int n1 ","[, endId=n2]",") : string"),(0,l.kt)("td",{parentName:"tr",align:null},"Cuts the sequence of characters on positions ",(0,l.kt)("inlineCode",{parentName:"td"},"n1")," to ",(0,l.kt)("inlineCode",{parentName:"td"},"n2"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = substring("This is Jake", 5, endId=7) ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"left"),"(string arg, int n) : string"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the initial sequence of characters from ",(0,l.kt)("inlineCode",{parentName:"td"},"arg")," of length ",(0,l.kt)("inlineCode",{parentName:"td"},"n"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = left("This is Jake", 5) ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"right"),"(string arg, int n) : string"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the final sequence of characters from ",(0,l.kt)("inlineCode",{parentName:"td"},"arg "),"of length ",(0,l.kt)("inlineCode",{parentName:"td"},"n"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = right("This is Jake", 5) ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"lower"),"(string arg) : string"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the given ",(0,l.kt)("inlineCode",{parentName:"td"},"arg")," text in which all uppercase characters are converted to lowercase."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = lower("This is Jake") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"upper"),"(string arg) : string"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the given ",(0,l.kt)("inlineCode",{parentName:"td"},"arg")," text in which all lowercase characters are converted to uppercase."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = upper("This is Jake") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"replace"),"(string arg, string str1, string str2 ","[, strat=first/last/all]",") :  string"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the given ",(0,l.kt)("inlineCode",{parentName:"td"},"arg")," text in which ",(0,l.kt)("inlineCode",{parentName:"td"},"str1")," strings are converted to ",(0,l.kt)("inlineCode",{parentName:"td"},"str2")),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = replace("This is Jake", "Jake", "Harry") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"trim"),"(string arg) : string"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns ",(0,l.kt)("inlineCode",{parentName:"td"},"arg"),' text without "white" characters at the beginning and the end.'),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = trim("     This is Jake     ") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"startsWith"),"(string arg1, string arg2) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if the given ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," text starts with the string ",(0,l.kt)("inlineCode",{parentName:"td"},"arg2"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = startsWith("This is Jake" , "This") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"endsWith"),"(string arg1, string arg2) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if the given ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," text ends with the string ",(0,l.kt)("inlineCode",{parentName:"td"},"arg2"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = endsWith("This is Jake" , "Jake") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"contains"),"(string arg1, string arg2 ","[, ignorecase=true/false]",") : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," contains the string ",(0,l.kt)("inlineCode",{parentName:"td"},"arg2"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = contains("This is Jake" , "is") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"indexOf"),"(string arg1, char arg2 ","[, start_index={int}][, ignore_case=true/false]",") : int"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the position on which the ",(0,l.kt)("inlineCode",{parentName:"td"},"arg2")," character is in ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = indexOf("This is Jake" , "is" ) ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"strlen"),"(string arg) : int"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the length of the string of ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," characters."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = strlen("This is Jake") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"regex"),"(string text, string pattern) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if the given ",(0,l.kt)("inlineCode",{parentName:"td"},"text")," contains the regular expression ",(0,l.kt)("inlineCode",{parentName:"td"},"pattern"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = regex("This is Jake", "^.',(0,l.kt)("em",{parentName:"td"},"is."),'$") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"like"),"(string text, string pattern) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if the given ",(0,l.kt)("inlineCode",{parentName:"td"},"text")," contains a ",(0,l.kt)("inlineCode",{parentName:"td"},"pattern"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = like("This is Jake", "',(0,l.kt)("em",{parentName:"td"},"is"),'Jak?") ',"|"," project +funResult ","|"," limit 1")))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"aggregator-acumulator-functions"},"Aggregator (Acumulator) functions"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"count"),"(field_name)"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of objects found in a group."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," aggr clientIpCount = count(clientIp) by protocol unwind=true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"sum"),"(field_name)"),(0,l.kt)("td",{parentName:"tr",align:null},"The sum of the ",(0,l.kt)("inlineCode",{parentName:"td"},"field_name")," values in all objects found in a group."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," aggr clientBytesSum = sum(clientBytes) by protocol unwind=true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"avg"),"(field_name)"),(0,l.kt)("td",{parentName:"tr",align:null},"The average of the ",(0,l.kt)("inlineCode",{parentName:"td"},"field_name")," values in all objects found in a group."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," aggr clientBytesAvg = avg(clientBytes) by protocol unwind=true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"min"),"(field_name)"),(0,l.kt)("td",{parentName:"tr",align:null},"The lowest of the ",(0,l.kt)("inlineCode",{parentName:"td"},"field_name")," values in all objects found in a group."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," aggr clientBytesMin = min(clientBytes) by protocol unwind=true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"max"),"(field_name)"),(0,l.kt)("td",{parentName:"tr",align:null},"The highest of the ",(0,l.kt)("inlineCode",{parentName:"td"},"field_name")," values in all objects found in a group."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," aggr clientBytesMax = max(clientBytes) by protocol unwind=true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"first"),"(field_name)"),(0,l.kt)("td",{parentName:"tr",align:null},"The first value of the ",(0,l.kt)("inlineCode",{parentName:"td"},"field_name")," in all objects found in a group."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," aggr clientBytesFisrt = first(clientBytes) by protocol unwind=true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"last"),"(field_name)"),(0,l.kt)("td",{parentName:"tr",align:null},"The last value of the ",(0,l.kt)("inlineCode",{parentName:"td"},"field_name")," in all objects found in a group."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," aggr clientBytesLast = last(clientBytes) by protocol unwind=true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"dc"),"(field_name)"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of unique values of the ",(0,l.kt)("inlineCode",{parentName:"td"},"field_name")," in all objects found in a group."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," aggr clientBytesDc = dc(clientBytes) by clientIp unwind=true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"join"),"(field_name)"),(0,l.kt)("td",{parentName:"tr",align:null},"The blend of values of the ",(0,l.kt)("inlineCode",{parentName:"td"},"field_name")," values in all objects found in a group."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," aggr clientIps = join(clientIp) by protocol unwind=true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"prc"),"(field_name ","[, percentile={double}]",")"),(0,l.kt)("td",{parentName:"tr",align:null},"The percentile/100  order quantile for each unique key defined by the ",(0,l.kt)("inlineCode",{parentName:"td"},"BY")," clause of the ",(0,l.kt)("inlineCode",{parentName:"td"},"AGGR"),"  command group."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," aggr clientBytesPrc = prc(clientBytes) by clientIp unwind=true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"prc95"),"(field_name)"),(0,l.kt)("td",{parentName:"tr",align:null},"The quantile of 95/100  for each unique key defined by the ",(0,l.kt)("inlineCode",{parentName:"td"},"BY")," clause of the ",(0,l.kt)("inlineCode",{parentName:"td"},"AGGR")," command group."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="netflow" ',"|"," aggr clientBytesPrc = prc95(clientBytes) by clientIp unwind=true")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note"),": The aggregation functions cannot be combined with ordinary functions in aggregations. For example, the command ",(0,l.kt)("inlineCode",{parentName:"p"},'src stream ="netflowByCountryAggr" | aggr mintimestamp=tsToStr(min(timestamp))'),", in which you want to retrieve the minimum (min) value of the timestamp field and immediately convert the result to text form (",(0,l.kt)("inlineCode",{parentName:"p"},"tsToStr"),"), will not work. Instead, you can use the set command: ",(0,l.kt)("inlineCode",{parentName:"p"},'src stream ="netflowByCountryAggr" | aggr mintimestamp=min(timestamp) | set mintimestampStr=tsToStr(mintimestamp)'),"."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"network-object-functions"},"Network object functions"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"isIp"),"(object arg) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg0")," is a valid IPv4 or IPv6 address."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = isIp("172.16.60.143") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"isIp4"),"(object arg) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg0")," is a valid IPv4 address."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = isIp4("172.16.60.143") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"isIp6"),"(object arg) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg0")," is a valid IPv6 address."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = isIp6("2001:db8:3333:4444:5555:6666:1.2.3.4") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"isIpLoopback"),"(object arg) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg0"),' is a valid "loopback" address.'),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = isIpLoopback("172.16.60.143") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"isIpMulticast"),"(object arg) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg0")," is a valid IP multicast address."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = isIpMulticast("172.16.60.143") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"isIpPrivate"),"(object arg) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg0")," is a valid private address."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = isIpPrivate("172.16.60.143") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"toMac"),"(string arg ","[,type={string}]",") : object"),(0,l.kt)("td",{parentName:"tr",align:null},"Based on the text representation of the MAC address, returns the MAC address type."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = toMac("00:00:5e:00:53:af") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"isMac"),"(object arg) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg0")," is a valid MAC address."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = isMac("00:00:5e:00:53:af") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"ipToStr"),"(object arg ","[,short=true/false]",") : string"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns a textual representation of the IP address."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResultIp = toIp("172.16.60.143") ',"|"," set funResultIpStr = ipToStr(funResultIp) ","|"," project +funResultIp ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"macToStr"),"(object arg) : string"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns a textual representation of MAC address."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResultMac = toMac("00:00:5e:00:53:af") ',"|"," set funResultMacStr = macToStr(funResultMac) ","|"," project +funResultMacStr ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"toSubnet"),"(string arg) : IpSubnet"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns an object of IbSubnet type based on the text representation of ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = toSubnet("172.16.60.143") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"isSubnet"),"(object arg) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if the passed ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," is a valid representation of the subnet mask for IP version 4 or 6."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = isSubnet("172.16.60.143") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"inSubnet"),"(object ip, object subnet) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if the passed IP address belongs to the indicated subnet mask."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = inSubnet("172.16.60.143", "172.16.40.0/24") ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"subnetToStr"),"(object arg) : string"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns a textual representation of the subnet mask."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = subnetToStr("172.16.40.0/24") ',"|"," project +funResult ","|"," limit 1")))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"lookup-functions"},"Lookup functions"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"lookup"),"(string lookupName, string outputKey, map<string, object> input","[, default={string} unwind={string}]",") : object"),(0,l.kt)("td",{parentName:"tr",align:null},"Function returns an ",(0,l.kt)("inlineCode",{parentName:"td"},"outputKey")," field value of the first found object in the ",(0,l.kt)("inlineCode",{parentName:"td"},"lookupName")," lookup which meets the criteria defined in ",(0,l.kt)("inlineCode",{parentName:"td"},"input"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|",' set nameByPort=lookup("names-app", "name", {"port": "80"}) ',"|"," project +nameByPort ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"lookupAll"),"(string lookupName, string outputKey, map<string, object> input","[, noresult={string},  unwind={string}]",") : object"),(0,l.kt)("td",{parentName:"tr",align:null},"Function returns an ",(0,l.kt)("inlineCode",{parentName:"td"},"outputKey")," field value of all objects in the ",(0,l.kt)("inlineCode",{parentName:"td"},"lookupName")," lookup which meet the criteria defined in ",(0,l.kt)("inlineCode",{parentName:"td"},"input"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|",' set portsByName=lookupAll("names-app", "port", {"name": "NETBIOS"}) ',"|"," project +portsByName ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"lookupKeyExists"),"(string lookupName,  map<string, object> input) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Function checks an occurrence of an object in the ",(0,l.kt)("inlineCode",{parentName:"td"},"lookupName")," lookup which meets the ",(0,l.kt)("inlineCode",{parentName:"td"},"input")," criteria."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|",' set portExists=lookupKeyExists("names-app", {"port": "80"}) ',"|"," project +portExists ","|"," limit 1")))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"collection-functions"},"Collection functions"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"in"),"(object arg1, collection arg2) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if the ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," object or number is in the ",(0,l.kt)("inlineCode",{parentName:"td"},"arg2")," collection."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = in("John", ','["his", "name", "is" ,"John"]',") ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"all"),"(object arg0, collection arg1) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg0")," (collections or array) is a subset of ",(0,l.kt)("inlineCode",{parentName:"td"},"arg2")," (array or list)."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = all(",'["a", "b"]',", ",'["a", "b", "c"]',") ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"any"),"(object arg0, collection arg1) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"arg2")," (collections or array) have common elements."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = any(",'["value1"]',", ",'["value2", "value3"]',") ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"none"),"(object arg0, collection arg1) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"arg2")," (collections or array) have no common elements."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = none(",'["value1"]',", ",'["value2", "value3"]',")\t ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"len"),"(collection arg0) : number"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the number of elements in a collection (array, list, set)."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = len(",'[1, "two", 3.0]',")  ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"valueAt"),"(collection arg1, int index) : object"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the value from the collection at the specified index."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = valueAt(",'[1, "two", 3.0]',", 2) ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"hasKey"),"(string key, map map) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if key exists in the ",(0,l.kt)("inlineCode",{parentName:"td"},"map")," map."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = hasKey("a", {"a": 1}) ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"hasValue"),"(string val, map) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if the ",(0,l.kt)("inlineCode",{parentName:"td"},"val")," value exists in the ",(0,l.kt)("inlineCode",{parentName:"td"},"map")," map."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = hasValue(1, {"a": 1}) ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"get"),"(int arg1, collection arg2) : object"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the value of an element in the ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," collection for a given ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," index."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|","  set funResult = get(1, ","[10,20,30]",") ","|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"getValue"),"(string arg1, map arg2) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the value of the element in the  ",(0,l.kt)("inlineCode",{parentName:"td"},"arg2")," map after the ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," key."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = getValue("a", {"a": 1}) ',"|"," project +funResult ","|"," limit 1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"anyMatchingNumber"),"(collection arg1, long mask, long arg2) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if there is at least one ",(0,l.kt)("inlineCode",{parentName:"td"},"x"),"  value in the ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," collection that meets the condition ",(0,l.kt)("inlineCode",{parentName:"td"},"(x & mask) == arg2"),",  where",(0,l.kt)("inlineCode",{parentName:"td"}," (x & mask)")," is the result of an ",(0,l.kt)("inlineCode",{parentName:"td"},"AND")," operation on the bits."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":0} ',"|"," set funResult = anyMatchingNumber(","[1,2,3]",", 1, 1) ","|"," project +funResult")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"noMatchingNumber"),"(collection arg1, long mask, long arg2) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the opposite value (",(0,l.kt)("inlineCode",{parentName:"td"},"NOT"),") to the  result of ",(0,l.kt)("inlineCode",{parentName:"td"},"anyMatchingNumber(arg1, mask, arg2)"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":0} ',"|"," set funResult = noMatchingNumber(","[1,2,3]",", 1, 1) ","|"," project +funResult")))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"collector-functions"},"Collector functions"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Function name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example*"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"valInColl"),"(object value, string collector, string field_name ","[, maxCacheSize={int}]",") : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if the value exists in the ",(0,l.kt)("inlineCode",{parentName:"td"},"collector")," in the given ",(0,l.kt)("inlineCode",{parentName:"td"},"field_name"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = valInColl("Medium", "collectorNo1", "alertSeverity")')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"collExists"),"(string collector) : boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if a collector with the given ",(0,l.kt)("inlineCode",{parentName:"td"},"collector")," exists."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = collExists("collectorNo1")')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"valColl"),"(string collector, string output, Map<String, Object> input ","[,default={string}]",")"),(0,l.kt)("td",{parentName:"tr",align:null},"The function returns the value from ",(0,l.kt)("inlineCode",{parentName:"td"},"collector")," according to the set input matching the criteria and the set output field/column."),(0,l.kt)("td",{parentName:"tr",align:null},'records {"n":"0"} ',"|",'  set funResult = valColl("collectorNo1", "alertName", {"id": "61ed6f62-dc45fb9a-e1c8b7f1"})')))),(0,l.kt)("p",null,'*Examples assume existing of a collector "collectorNo1" created by the command: ',(0,l.kt)("inlineCode",{parentName:"p"},'src stream="alerts" | limit 1000 | dst "collectorNo1"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"operators"},"Operators"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Logical operators"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"AND")," or ",(0,l.kt)("strong",{parentName:"td"},"and")),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|",'where $eq(alertSeverity,"Medium") AND alertFlagThresholdLevel="Crirical"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"OR")," or ",(0,l.kt)("strong",{parentName:"td"},"or")),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|",'where eq(alertSeverity,"Medium") OR eq(alertSeverity,"Hight")')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"NOT")," or ",(0,l.kt)("strong",{parentName:"td"},"not")),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|",' where not alertSeverity="Medium"')))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Comparison operators or function"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"=")," or ",(0,l.kt)("strong",{parentName:"td"},"eq")),(0,l.kt)("td",{parentName:"tr",align:null},"(Equal) Checks if two values are equal. Returns true if they are and false otherwise."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|",'where eq(alertSeverity,"Medium")')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"!=")," or ",(0,l.kt)("strong",{parentName:"td"},"neq")),(0,l.kt)("td",{parentName:"tr",align:null},"(Not Equal) Checks if two values are not equal. Returns true if they are not equal and false otherwise."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|",' where alertSeverity != "Medium"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},">")," or ",(0,l.kt)("strong",{parentName:"td"},"gt")),(0,l.kt)("td",{parentName:"tr",align:null},"(Greater Than) Checks if the first value is greater than the second value. Returns true if it is and false otherwise."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|"," where _avgClientBitsPerSecond > 9000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},">=")," or ",(0,l.kt)("strong",{parentName:"td"},"gte")),(0,l.kt)("td",{parentName:"tr",align:null},"(Greater Than or Equal To) Checks if the first value is greater than or equal to the second value. Returns true if it is and false otherwise."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|","where gte(_avgClientBitsPerSecond,1000)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"<")," or ",(0,l.kt)("strong",{parentName:"td"},"lt")),(0,l.kt)("td",{parentName:"tr",align:null},"(Less Than) Checks if the first value is lower than the second value. Returns true if it is and false otherwise."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|"," where _avgClientBitsPerSecond < 1000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},">=")," or ",(0,l.kt)("strong",{parentName:"td"},"lte")),(0,l.kt)("td",{parentName:"tr",align:null},"(Less Than or Equal To) Checks if the first value is lower than or equal to the second value. Returns true if it is and false otherwise."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|"," where _avgClientBitsPerSecond >= 1000")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"contains"),"(arg1,arg2)"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," contains the string ",(0,l.kt)("inlineCode",{parentName:"td"},"arg2"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|",'where contains(alertFlagThresholdLevel, "Critic")')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"not_contains"),"(arg1,arg2)"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," does not contain the string ",(0,l.kt)("inlineCode",{parentName:"td"},"arg2"),"."),(0,l.kt)("td",{parentName:"tr",align:null},'rc stream="alerts" ',"|",'where not_contains(alertName, "Test")')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"startsWith"),"(arg1,arg2)"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," starts with the ",(0,l.kt)("inlineCode",{parentName:"td"},"arg2")," string."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|",'where startsWith(alertRuleType, "Vis")')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"endsWith"),"(arg1,arg2)"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," ends with the ",(0,l.kt)("inlineCode",{parentName:"td"},"arg2")," string."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|",'where endsWith(alertRuleType, "ity")')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"isEmpty"),"(arg1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," is empty."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|","where isEmpty(alertRuleType)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"isNotEmpty"),"(arg1)"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," is not empty."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|","where $isNotEmpty(alertRuleType)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"in"),"(arg1,arg2)"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," is in the ",(0,l.kt)("inlineCode",{parentName:"td"},"arg2")," collection."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|"," where $in(alertFlagThresholdLevel, ",'["Crirical", "Minor"]',")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"notIn"),"(arg1,arg2)"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," is not in the ",(0,l.kt)("inlineCode",{parentName:"td"},"arg2")," collection."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|","where notIn(alertFlagThresholdLevel, ",'["Crirical", "Minor"]',")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"~=")," or ",(0,l.kt)("strong",{parentName:"td"},"like"),"(arg1,arg2)"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," matches the ",(0,l.kt)("inlineCode",{parentName:"td"},"arg2")," pattern."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|",' where alertFlagThresholdLevel~="Critic*"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"=/regexp/")," or ",(0,l.kt)("strong",{parentName:"td"},"regex"),"(arg1,arg2)"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns true if ",(0,l.kt)("inlineCode",{parentName:"td"},"arg1")," contains the ",(0,l.kt)("inlineCode",{parentName:"td"},"arg2")," regular expression pattern."),(0,l.kt)("td",{parentName:"tr",align:null},'src stream="alerts" ',"|"," where alertFlagThresholdLevel=/Critic.*/")))))}g.isMDXComponent=!0}}]);